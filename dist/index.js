(()=>{"use strict";var e={519:(e,t,n)=>{const o=n(522);customElements.define("custom-select-view",o.CustomSelectView),customElements.define("type-select-view",o.TypeSelectView)},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TypeSelectView=t.CustomSelectView=void 0;class n extends HTMLElement{constructor(){super(),this.internalOptions=[];const e=this.attachShadow({mode:"open"}),t=document.createElement("style");"dark"===this.getAttribute("theme")?t.textContent="\n                button {\n                text-align: start;\n                background-color: #222222;\n                border: none;\n                padding: 8px 8px;\n                color: white;\n                }\n                button:hover {\n                background-color: #333333;\n                }\n                button.selected {\n                background-color: #0077FF;\n                color: white;\n                }\n                .d-none { display: none; }\n                .d-block { display: block;}\n                .d-flex { display: flex; flex-direction: column;}\n                }\n           ":t.textContent="\nbutton {\ntext-align: start;\nbackground-color: #FFFFFF;\nborder: none;\npadding: 8px 8px;\ncolor: black;\n}\nbutton:hover {\nbackground-color: #F0F0F0;\n}\nbutton.selected {\nbackground-color: #0077FF;\ncolor: white;\n}\n.d-none { display: none; }\n.d-block { display: block;}\n.d-flex { display: flex; flex-direction: column;}\n}\n",e.innerHTML='<div><div id="options-list" style="display: flex; flex-direction: column;"></div></div>',e.appendChild(t)}static get observedAttributes(){return["selectedoptionindex","theme"]}set options(e){this.internalOptions=e;const t=this.shadowRoot.getElementById("options-list");t.innerText="";for(const n of e){const e=document.createElement("button");e.setAttribute("value",n.value),e.innerText=n.label,e.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("option-select",{detail:{value:n.value}}))})),t.appendChild(e)}}get options(){return this.internalOptions}attributeChangedCallback(e,t,n){if("selectedoptionindex"===e){const e=parseInt(n);if(e<0)return;for(const e of this.shadowRoot.getElementById("options-list").getElementsByTagName("button"))e.className="";this.shadowRoot.getElementById("options-list").getElementsByTagName("button").length>e&&(this.shadowRoot.getElementById("options-list").getElementsByTagName("button")[e].className="selected")}}}t.CustomSelectView=n;class o extends HTMLElement{constructor(){super(),this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],this.selectedOptionIndex=-1;const e=this.attachShadow({mode:"open"}),t=document.createElement("style"),n=this.getAttribute("theme");t.textContent="dark"===n?"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid rgba(0, 0, 0, 0.7);\nbackground-color: #333333;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #333333;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n        }\n        button#create-new:hover {\n          background-color: #505050;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.3);\n        }\n        input#search {\nbackground-color: #303030;\ntransition: border-color 0.1s;\n          margin: 4px 4px;\n          border-radius: 0px;\n          border: 2px solid #303030;\n          padding: 8px 8px;\n          outline: none;\ncolor: white;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n":"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid #B0B0B0;\nbackground-color: #808080;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #FFFFFF;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n          color:black;\n        }\n        button#create-new:hover {\n          background-color: #F0F0F0;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.1);\n        }\n        input#search {\nbackground-color: #FFFFFF;\ntransition: border-color 0.1s;\n          margin: 5px 5px;\n          border-radius: 0px;\n          border: 1px solid #707070;\n          padding: 8px 8px;\n          outline: none;\ncolor: black;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\nmargin: 4px;\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n";const o=this.getAttribute("placeholder")||"type here";e.innerHTML=`\n        <div id="root">\n          <form id="search-form" style="display: flex;">\n            <input id="search" type="text" placeholder=${o} style="width: 100%;" autocomplete="off"/>\n          </form>\n          <div id="sub" class="d-none">\n            <custom-select-view id="select-view" theme=${n}></custom-select-view>\n            <button id="create-new">Create </button>\n          </div>\n        </div>\n`,e.appendChild(t),e.getElementById("search").oninput=e=>{this.onSearchInputChange(e.target.value)},e.getElementById("search").onkeydown=e=>{"ArrowUp"===e.key?(this.selectedOptionIndex-=1,this.selectedOptionIndex<0&&(this.selectedOptionIndex=0),this.shadowRoot.getElementById("search").blur(),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"ArrowDown"===e.key?(this.selectedOptionIndex+=1,this.selectedOptionIndex>=this.options.length&&(this.selectedOptionIndex=this.options.length-1),this.shadowRoot.getElementById("search").blur(),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"Escape"===e.key&&this.onBlur()},e.getElementById("search-form").onsubmit=e=>(this.onSearchFormSubmit(),!1),e.getElementById("search-form").onfocus=()=>{this.onFocus()},e.getElementById("search").onfocus=()=>{this.onFocus()},this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],this.options=this.Options,this.onblur=()=>{this.onBlur()},this.onfocus=()=>{this.onFocus()},e.getElementById("select-view").addEventListener("option-select",(e=>{const t=e.detail.value;this.onOptionSelected(t)})),this.shadowRoot.getElementById("sub").className="d-none";const s=this.shadowRoot.getElementById("create-new");s.addEventListener("click",(e=>{this.onCreateNewButtonClicked()})),s.className="d-none"}static get observedAttributes(){return["theme","placeholder"]}onSearchFormSubmit(){const e=this.shadowRoot.getElementById("select-view");1===this.shadowRoot.getElementById("select-view").options.length?this.onOptionSelected(e.options[0].value):this.selectedOptionIndex>=0&&this.selectedOptionIndex<=this.Options.length?this.onOptionSelected(this.options[this.selectedOptionIndex].value):"d-block"===this.shadowRoot.getElementById("create-new").className&&this.onCreateNewButtonClicked(),this.onBlur()}onCreateNewButtonClicked(){new Array(this.Options);const e={value:this.Options.length,label:this.shadowRoot.getElementById("search").value};this.Options.push(e),this.dispatchEvent(new CustomEvent("selection-options-change",{detail:{options:this.Options}})),this.onOptionSelected(e.value)}onOptionSelected(e){let t="";for(const n of this.Options)n.value===e&&(t=n.label);this.shadowRoot.getElementById("search").value=t,this.dispatchEvent(new CustomEvent("type-select-change",{detail:{value:e}})),this.onBlur()}get currentLabel(){return this.shadowRoot.getElementById("search").value}onFocus(){this.shadowRoot.getElementById("sub").className="d-flex",this.shadowRoot.getElementById("search").focus()}onBlur(){this.shadowRoot.getElementById("search").blur(),this.shadowRoot.getElementById("sub").className="d-none"}setCreateNewButtonDisplay(e,t){const n=this.shadowRoot.getElementById("create-new");n.innerText=`Create: ${t}`,""!==t&&(e.length>1||1!==e.length||e[0].label!==t)?n.className="d-block":n.className="d-none"}onSearchInputChange(e){const t=this.Options.filter((t=>t.label.includes(e)));this.shadowRoot.getElementById("select-view").options=t,this.setCreateNewButtonDisplay(t,e)}set options(e){this.Options=e,this.shadowRoot.getElementById("select-view").options=e}get options(){return this.Options}set value(e){for(const t of this.options)t.value===e&&(this.shadowRoot.getElementById("search").value=t.label)}set selected(e){this.shadowRoot.getElementById("search").className=e?"selected":"not-selected"}}t.TypeSelectView=o}},t={};!function n(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3djLWl0ZW1zLy4vc3JjL3NlbGVjdGlvbi50cyIsIndlYnBhY2s6Ly93Yy1pdGVtcy93ZWJwYWNrL2Jvb3RzdHJhcCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3VzdG9tU2VsZWN0VmlldyA9IGV4cG9ydHMuVHlwZVNlbGVjdFZpZXcgPSB2b2lkIDA7XG5jb25zdCBzZWxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3NlbGVjdGlvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVTZWxlY3RWaWV3XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxlY3Rpb25fMS5UeXBlU2VsZWN0VmlldzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkN1c3RvbVNlbGVjdFZpZXdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGVjdGlvbl8xLkN1c3RvbVNlbGVjdFZpZXc7IH0gfSk7XG4vLyBpbXBvcnQgeyBUYWJTZWxlY3Rpb24gfSBmcm9tICcuL3RhYlNlbGVjdGlvbic7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJjdXN0b20tc2VsZWN0LXZpZXdcIiwgc2VsZWN0aW9uXzEuQ3VzdG9tU2VsZWN0Vmlldyk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ0eXBlLXNlbGVjdC12aWV3XCIsIHNlbGVjdGlvbl8xLlR5cGVTZWxlY3RWaWV3KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlU2VsZWN0VmlldyA9IGV4cG9ydHMuQ3VzdG9tU2VsZWN0VmlldyA9IHZvaWQgMDtcbmNsYXNzIEN1c3RvbVNlbGVjdFZpZXcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICAgICAgICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjIyMjtcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDhweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnV0dG9uLnNlbGVjdGVkIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3N0ZGO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmQtbm9uZSB7IGRpc3BsYXk6IG5vbmU7IH1cbiAgICAgICAgICAgICAgICAuZC1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICAgICAgICAgICAgICAuZC1mbGV4IHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICBgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG5idXR0b24ge1xudGV4dC1hbGlnbjogc3RhcnQ7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xuYm9yZGVyOiBub25lO1xucGFkZGluZzogOHB4IDhweDtcbmNvbG9yOiBibGFjaztcbn1cbmJ1dHRvbjpob3ZlciB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRjBGMEYwO1xufVxuYnV0dG9uLnNlbGVjdGVkIHtcbmJhY2tncm91bmQtY29sb3I6ICMwMDc3RkY7XG5jb2xvcjogd2hpdGU7XG59XG4uZC1ub25lIHsgZGlzcGxheTogbm9uZTsgfVxuLmQtYmxvY2sgeyBkaXNwbGF5OiBibG9jazt9XG4uZC1mbGV4IHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjt9XG59XG5gO1xuICAgICAgICB9XG4gICAgICAgIHNoYWRvdy5pbm5lckhUTUwgPSBgPGRpdj48ZGl2IGlkPVwib3B0aW9ucy1saXN0XCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1wiPjwvZGl2PjwvZGl2PmA7XG4gICAgICAgIHNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1wic2VsZWN0ZWRvcHRpb25pbmRleFwiLCBcInRoZW1lXCJdO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgb3B0aW9uc0xpc3RDb250YWluZXIgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJvcHRpb25zLWxpc3RcIik7XG4gICAgICAgIG9wdGlvbnNMaXN0Q29udGFpbmVyLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5pbm5lclRleHQgPSBvcHRpb24ubGFiZWw7XG4gICAgICAgICAgICBvcHRpb25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIm9wdGlvbi1zZWxlY3RcIiwgeyBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb24udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wdGlvbnNMaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE9wdGlvbnM7XG4gICAgfVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIik7XG4gICAgICAgIGlmIChuYW1lID09PSBcInNlbGVjdGVkb3B0aW9uaW5kZXhcIikge1xuICAgICAgICAgICAgLy8gcmUtZHJhd1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb25JbmRleCA9IHBhcnNlSW50KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbkluZGV4IDwgMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwib3B0aW9ucy1saXN0XCIpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcIm9wdGlvbnMtbGlzdFwiKS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJ1dHRvblwiKS5sZW5ndGggPiBzZWxlY3RlZE9wdGlvbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwib3B0aW9ucy1saXN0XCIpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpW3NlbGVjdGVkT3B0aW9uSW5kZXhdLmNsYXNzTmFtZSA9IFwic2VsZWN0ZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ3VzdG9tU2VsZWN0VmlldyA9IEN1c3RvbVNlbGVjdFZpZXc7XG5jbGFzcyBUeXBlU2VsZWN0VmlldyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5PcHRpb25zID0gW1xuICAgICAgICAgICAgeyB2YWx1ZTogMCwgbGFiZWw6IFwiZG9nXCIgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IDEsIGxhYmVsOiBcImNhdFwiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiAyLCBsYWJlbDogXCJyYWJiaXRcIiB9LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSAtMTtcbiAgICAgICAgY29uc3Qgc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIGNvbnN0IHRoZW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKTtcbiAgICAgICAgaWYgKHRoZW1lID09PSBcImRhcmtcIikge1xuICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgICAgIGRpdiNyb290IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGRpdiNzdWIge1xuICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogNDVweDtcbiAgICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gOHB4KTtcbiAgICAgICAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjcpO1xuYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jY3JlYXRlLW5ldyB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbmNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgcGFkZGluZzogOHB4IDRweDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jY3JlYXRlLW5ldzpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzUwNTA1MDtcbiAgICAgICAgfVxuICAgICAgICAuZC1ub25lIHsgZGlzcGxheTogbm9uZTsgfVxuICAgICAgICAuZC1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICAgICAgZGl2I3N1Yi5kLWZsZXgge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDVweCA1cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0I3NlYXJjaCB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjMzAzMDMwO1xudHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMXM7XG4gICAgICAgICAgbWFyZ2luOiA0cHggNHB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAjMzAzMDMwO1xuICAgICAgICAgIHBhZGRpbmc6IDhweCA4cHg7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbmNvbG9yOiB3aGl0ZTtcbn0gICAgaW5wdXQjc2VhcmNoOmZvY3VzLXZpc2libGUge1xuYm9yZGVyOiAycHggc29saWQgcmdiYSgxMDAsIDE3MCwgMjU1LCAwLjcpO1xub3V0bGluZS13aWR0aDogMDtcbn1cbmlucHV0I3NlYXJjaC5zZWxlY3RlZCB7XG5jb2xvcjogI0ZGMzMxMTtcbmJvcmRlci1jb2xvcjogI0ZGMzMxMTtcbn1cbmA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgICAgZGl2I3Jvb3Qge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgZGl2I3N1YiB7XG4gICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdG9wOiA0NXB4O1xuICAgICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSA4cHgpO1xuICAgICAgICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjQjBCMEIwO1xuYmFja2dyb3VuZC1jb2xvcjogIzgwODA4MDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jY3JlYXRlLW5ldyB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjtcbmNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgcGFkZGluZzogOHB4IDRweDtcbiAgICAgICAgICBjb2xvcjpibGFjaztcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jY3JlYXRlLW5ldzpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0YwRjBGMDtcbiAgICAgICAgfVxuICAgICAgICAuZC1ub25lIHsgZGlzcGxheTogbm9uZTsgfVxuICAgICAgICAuZC1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICAgICAgZGl2I3N1Yi5kLWZsZXgge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDVweCA1cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0I3NlYXJjaCB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xudHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMXM7XG4gICAgICAgICAgbWFyZ2luOiA1cHggNXB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNzA3MDcwO1xuICAgICAgICAgIHBhZGRpbmc6IDhweCA4cHg7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbmNvbG9yOiBibGFjaztcbn0gICAgaW5wdXQjc2VhcmNoOmZvY3VzLXZpc2libGUge1xuYm9yZGVyOiAycHggc29saWQgcmdiYSgxMDAsIDE3MCwgMjU1LCAwLjcpO1xubWFyZ2luOiA0cHg7XG5vdXRsaW5lLXdpZHRoOiAwO1xufVxuaW5wdXQjc2VhcmNoLnNlbGVjdGVkIHtcbmNvbG9yOiAjRkYzMzExO1xuYm9yZGVyLWNvbG9yOiAjRkYzMzExO1xufVxuYDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikgfHwgXCJ0eXBlIGhlcmVcIjtcbiAgICAgICAgc2hhZG93LmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBpZD1cInJvb3RcIj5cbiAgICAgICAgICA8Zm9ybSBpZD1cInNlYXJjaC1mb3JtXCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4O1wiPlxuICAgICAgICAgICAgPGlucHV0IGlkPVwic2VhcmNoXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSBzdHlsZT1cIndpZHRoOiAxMDAlO1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgPGRpdiBpZD1cInN1YlwiIGNsYXNzPVwiZC1ub25lXCI+XG4gICAgICAgICAgICA8Y3VzdG9tLXNlbGVjdC12aWV3IGlkPVwic2VsZWN0LXZpZXdcIiB0aGVtZT0ke3RoZW1lfT48L2N1c3RvbS1zZWxlY3Qtdmlldz5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJjcmVhdGUtbmV3XCI+Q3JlYXRlIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbmA7XG4gICAgICAgIHNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIHNoYWRvdy5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS5vbmlucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uU2VhcmNoSW5wdXRDaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgc2hhZG93LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLm9ua2V5ZG93biA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvbiBrZXkgZG93blwiKTtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dVcFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4IC09IDE7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA8IDApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLmJsdXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZG9wdGlvbmluZGV4XCIsIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd0Rvd25cIikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCArPSAxO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPj0gdGhpcy5vcHRpb25zLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID0gdGhpcy5vcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLmJsdXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZG9wdGlvbmluZGV4XCIsIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub25CbHVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNoYWRvdy5nZXRFbGVtZW50QnlJZChcInNlYXJjaC1mb3JtXCIpLm9uc3VibWl0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uU2VhcmNoRm9ybVN1Ym1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBzaGFkb3cuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtZm9ybVwiKS5vbmZvY3VzID0gKCkgPT4geyB0aGlzLm9uRm9jdXMoKTsgfTtcbiAgICAgICAgc2hhZG93LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLm9uZm9jdXMgPSAoKSA9PiB7IHRoaXMub25Gb2N1cygpOyB9O1xuICAgICAgICB0aGlzLk9wdGlvbnMgPSBbXG4gICAgICAgICAgICB7IHZhbHVlOiAwLCBsYWJlbDogXCJkb2dcIiB9LFxuICAgICAgICAgICAgeyB2YWx1ZTogMSwgbGFiZWw6IFwiY2F0XCIgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IDIsIGxhYmVsOiBcInJhYmJpdFwiIH0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuT3B0aW9ucztcbiAgICAgICAgdGhpcy5vbmJsdXIgPSAoKSA9PiB7IHRoaXMub25CbHVyKCk7IH07XG4gICAgICAgIHRoaXMub25mb2N1cyA9ICgpID0+IHsgdGhpcy5vbkZvY3VzKCk7IH07XG4gICAgICAgIHNoYWRvdy5nZXRFbGVtZW50QnlJZChcInNlbGVjdC12aWV3XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJvcHRpb24tc2VsZWN0XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMub25PcHRpb25TZWxlY3RlZCgoc2VsZWN0ZWRWYWx1ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic3ViXCIpLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZGlzcGxheTogbm9uZTtcIik7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInN1YlwiKS5jbGFzc05hbWUgPSBcImQtbm9uZVwiO1xuICAgICAgICBjb25zdCBjcmVhdGVOZXdCdXR0b24gPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJjcmVhdGUtbmV3XCIpO1xuICAgICAgICBjcmVhdGVOZXdCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4geyB0aGlzLm9uQ3JlYXRlTmV3QnV0dG9uQ2xpY2tlZCgpOyB9KTtcbiAgICAgICAgY3JlYXRlTmV3QnV0dG9uLmNsYXNzTmFtZSA9IFwiZC1ub25lXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1widGhlbWVcIiwgXCJwbGFjZWhvbGRlclwiXTtcbiAgICB9XG4gICAgb25TZWFyY2hGb3JtU3VibWl0KCkge1xuICAgICAgICAvLyBjcmVhdGUgb3Igc2V0XG4gICAgICAgIGNvbnN0IHNlbGVjdFZpZXcgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKTtcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlbGVjdC12aWV3XCIpLm9wdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm9uT3B0aW9uU2VsZWN0ZWQoc2VsZWN0Vmlldy5vcHRpb25zWzBdW1widmFsdWVcIl0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA+PSAwICYmIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA8PSB0aGlzLk9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm9uT3B0aW9uU2VsZWN0ZWQodGhpcy5vcHRpb25zW3RoaXMuc2VsZWN0ZWRPcHRpb25JbmRleF1bXCJ2YWx1ZVwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiY3JlYXRlLW5ld1wiKS5jbGFzc05hbWUgPT09IFwiZC1ibG9ja1wiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNyZWF0ZU5ld0J1dHRvbkNsaWNrZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQmx1cigpO1xuICAgIH1cbiAgICBvbkNyZWF0ZU5ld0J1dHRvbkNsaWNrZWQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBuZXcgQXJyYXkodGhpcy5PcHRpb25zKTtcbiAgICAgICAgY29uc3QgbmV3T3B0aW9uID0ge1xuICAgICAgICAgICAgXCJ2YWx1ZVwiOiB0aGlzLk9wdGlvbnMubGVuZ3RoLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2hcIikudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYG9wdGlvbnMubGVuZ3RoPSR7dGhpcy5PcHRpb25zLmxlbmd0aH1gKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2cobmV3T3B0aW9uKTtcbiAgICAgICAgLy8gb3B0aW9ucy5wdXNoKG5ld09wdGlvbik7XG4gICAgICAgIHRoaXMuT3B0aW9ucy5wdXNoKG5ld09wdGlvbik7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJzZWxlY3Rpb24tb3B0aW9ucy1jaGFuZ2VcIiwge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5PcHRpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5vbk9wdGlvblNlbGVjdGVkKG5ld09wdGlvbi52YWx1ZSk7XG4gICAgfVxuICAgIG9uT3B0aW9uU2VsZWN0ZWQodmFsdWUpIHtcbiAgICAgICAgbGV0IGxhYmVsID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgdGhpcy5PcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS52YWx1ZSA9IGxhYmVsO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwidHlwZS1zZWxlY3QtY2hhbmdlXCIsIHsgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9IH0pKTtcbiAgICAgICAgdGhpcy5vbkJsdXIoKTtcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRMYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS52YWx1ZTtcbiAgICB9XG4gICAgb25Gb2N1cygpIHtcbiAgICAgICAgLy8gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic3ViXCIpLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZGlzcGxheTogYmxvY2s7XCIpO1xuICAgICAgICAvLyB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzdWJcIikuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJkaXNwbGF5OiBmbGV4O1wiKTtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic3ViXCIpLmNsYXNzTmFtZSA9IFwiZC1mbGV4XCI7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS5mb2N1cygpO1xuICAgIH1cbiAgICBvbkJsdXIoKSB7XG4gICAgICAgIC8vIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInN1YlwiKS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImRpc3BsYXk6IG5vbmU7XCIpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2hcIikuYmx1cigpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzdWJcIikuY2xhc3NOYW1lID0gXCJkLW5vbmVcIjtcbiAgICB9XG4gICAgc2V0Q3JlYXRlTmV3QnV0dG9uRGlzcGxheShmaWx0ZXJlZE9wdGlvbnMsIHNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZU5ld0J1dHRvbiA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImNyZWF0ZS1uZXdcIik7XG4gICAgICAgIGNyZWF0ZU5ld0J1dHRvbi5pbm5lclRleHQgPSBgQ3JlYXRlOiAke3NlYXJjaFF1ZXJ5fWA7XG4gICAgICAgIGlmIChzZWFyY2hRdWVyeSA9PT0gXCJcIikge1xuICAgICAgICAgICAgY3JlYXRlTmV3QnV0dG9uLmNsYXNzTmFtZSA9IFwiZC1ub25lXCI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjcmVhdGVOZXdCdXR0b24uY2xhc3NOYW1lID0gXCJkLWJsb2NrXCI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkT3B0aW9uc1swXVtcImxhYmVsXCJdID09PSBzZWFyY2hRdWVyeSkge1xuICAgICAgICAgICAgICAgIGNyZWF0ZU5ld0J1dHRvbi5jbGFzc05hbWUgPSBcImQtbm9uZVwiO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVOZXdCdXR0b24uY2xhc3NOYW1lID0gXCJkLWJsb2NrXCI7XG4gICAgfVxuICAgIG9uU2VhcmNoSW5wdXRDaGFuZ2Uoc2VhcmNoUXVlcnkpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gdGhpcy5PcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uW1wibGFiZWxcIl0uaW5jbHVkZXMoc2VhcmNoUXVlcnkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LXZpZXdcIikub3B0aW9ucyA9IGZpbHRlcmVkT3B0aW9ucztcbiAgICAgICAgdGhpcy5zZXRDcmVhdGVOZXdCdXR0b25EaXNwbGF5KGZpbHRlcmVkT3B0aW9ucywgc2VhcmNoUXVlcnkpO1xuICAgICAgICAvLyB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJjcmVhdGUtbmV3XCIpLmlubmVyVGV4dCA9IGDmlrDopo/kvZzmiJA6ICR7c2VhcmNoUXVlcnl9YDtcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLk9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk9wdGlvbnM7XG4gICAgfVxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25bXCJ2YWx1ZVwiXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2hcIikudmFsdWUgPSBvcHRpb25bXCJsYWJlbFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgc2VsZWN0ZWQoc2VsZWN0ZWQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJzZXQgc2VsZWN0ZWRcIik7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS5jbGFzc05hbWUgPSBzZWxlY3RlZCA/IFwic2VsZWN0ZWRcIiA6IFwibm90LXNlbGVjdGVkXCI7XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlU2VsZWN0VmlldyA9IFR5cGVTZWxlY3RWaWV3O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiJdLCJuYW1lcyI6WyJzZWxlY3Rpb25fMSIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiQ3VzdG9tU2VsZWN0VmlldyIsIlR5cGVTZWxlY3RWaWV3IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJ0aGlzIiwiaW50ZXJuYWxPcHRpb25zIiwic2hhZG93IiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInN0eWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIm9wdGlvbnMiLCJvcHRpb25zTGlzdENvbnRhaW5lciIsInNoYWRvd1Jvb3QiLCJnZXRFbGVtZW50QnlJZCIsImlubmVyVGV4dCIsIm9wdGlvbiIsIm9wdGlvbkVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJsYWJlbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInNlbGVjdGVkT3B0aW9uSW5kZXgiLCJwYXJzZUludCIsImVsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNsYXNzTmFtZSIsImxlbmd0aCIsIk9wdGlvbnMiLCJ0aGVtZSIsInBsYWNlaG9sZGVyIiwib25pbnB1dCIsImV2ZW50Iiwib25TZWFyY2hJbnB1dENoYW5nZSIsInRhcmdldCIsIm9ua2V5ZG93biIsImtleSIsImJsdXIiLCJvbkZvY3VzIiwidG9TdHJpbmciLCJvbkJsdXIiLCJvbnN1Ym1pdCIsIm9uU2VhcmNoRm9ybVN1Ym1pdCIsIm9uZm9jdXMiLCJvbmJsdXIiLCJzZWxlY3RlZFZhbHVlIiwib25PcHRpb25TZWxlY3RlZCIsImNyZWF0ZU5ld0J1dHRvbiIsIm9uQ3JlYXRlTmV3QnV0dG9uQ2xpY2tlZCIsInNlbGVjdFZpZXciLCJBcnJheSIsIm5ld09wdGlvbiIsInB1c2giLCJjdXJyZW50TGFiZWwiLCJmb2N1cyIsInNldENyZWF0ZU5ld0J1dHRvbkRpc3BsYXkiLCJmaWx0ZXJlZE9wdGlvbnMiLCJzZWFyY2hRdWVyeSIsImZpbHRlciIsImluY2x1ZGVzIiwic2VsZWN0ZWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==