(()=>{"use strict";var e={653:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentBase=void 0;class n extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"}),t=document.createElement("style");t.textContent=this.getStyle(),e.innerHTML=this.renderHTML(),e.appendChild(t)}getStyle(){return""}renderHTML(){return""}}t.ComponentBase=n},881:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonItem=void 0;const o=n(653);class s extends o.ComponentBase{static get observedAttributes(){return["label","theme","onclick"]}attributeChangedCallback(e,t,n){t!=n&&"label"===e&&(this.shadowRoot.getElementById("button").innerText=n)}constructor(){super(),this.shadowRoot.getElementById("button").addEventListener("focus",(()=>{this.shadowRoot.getElementById("container").className=`focus ${this.getAttribute("theme")}`})),this.shadowRoot.getElementById("button").addEventListener("blur",(()=>{this.shadowRoot.getElementById("container").className=this.getAttribute("theme")}))}getStyle(){return"\n        div#container {\n          width:100%;\n          padding: 0px;\n          border: 2px solid transparent;\n          border-radius: 1px;\n          transition: background-color 0.1s;\n        }\n        div#container.focus {\n          // border-color: #2684FF60;\n          border: 2px solid #2684FF60;\n        }\n        div#container.bg-transparent.focus {\n          border: 1px solid #707070;\n        }\n        button{\n          font-size: 1rem;\n          width: 100%;\n          background-color: #0088FF;\n          color: white;\n          padding: 7px 10px;\n          border-radius: 0px;\n          border: 2px solid transparent;\n          appearance: none;\n          outline: none;\n          transition: background-color 0.1s;\n        }\n        div#container.bg-transparent{\n          border-width: 1px;\n        }\n        button#button:hover {\n          background-color: #4982DB;\n        }\n        button#button.bg-transparent {\n          color: black;\n          background-color: transparent;\n          border: 2px solid #707070;\n        }\n        button#button.bg-transparent:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n        button:focus {\n          border: 2px solid #4982DB;\n          background-color: #4982DB;\n        }\n        "}renderHTML(){const e=this.getAttribute("label");return`\n        <div id="container" class=${this.getAttribute("theme")}>\n          <button id="button" class=${this.getAttribute("theme")} onclick=${this.getAttribute("click")}>${e}</button>\n        </div>\n        `}}t.ButtonItem=s,customElements.define("button-component",s)},550:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Colors=void 0;class n{}t.Colors=n,n.BLUE="#0055FF"},483:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TextInput=void 0;const o=n(653),s=n(550);class i extends o.ComponentBase{constructor(){super();const e=e=>{console.log(this),this.dispatchEvent(new CustomEvent("event"))};e.bind(this),this.shadowRoot.getElementById("text-input").addEventListener("click",(t=>{e()}))}onInput(e){this.dispatchEvent(e)}getStyle(){return`\n        div#root {\npadding: 0px;\n        }\n        input{\n        background-color: transparent;\n        font-size: 1rem;\n        margin: 5px;\npadding: 8px;\n        border-radius: 0px;\n        border: 1px solid #707070;\ntransition: border-color 0.1s;\n        }\n        input:focus-visible {\n        border: 2px solid ${s.Colors.BLUE};\n        margin: 4px;\noutline: none;\n        }\n        `}renderHTML(){return`\n        <div id="root">\n          <input id="text-input" type="text" placeholder=${this.getAttribute("placeholder")||"Type"} />\n        </div>\n        `}}t.TextInput=i,customElements.define("text-input",i)},723:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LinkComponent=void 0;const o=n(653),s=n(550);class i extends o.ComponentBase{constructor(){super()}getStyle(){return`\n        a {\n          font-family: system-ui;\n          font-size: 1rem;\n          text-decoration: none;\n          color: ${s.Colors.BLUE};\n        }\n        a:hover {\n          text-decoration: underline;\n        }\n        a:visited {\n          color: ${s.Colors.BLUE};\n        }\n        `}renderHTML(){return`\n        <a href=${this.getAttribute("to")}>${this.getAttribute("label")}</a>\n        `}}t.LinkComponent=i,customElements.define("link-component",i)},519:(e,t,n)=>{const o=n(522);n(881),n(723),n(483),n(541),customElements.define("custom-select-view",o.CustomSelectView),customElements.define("type-select-view",o.TypeSelectView)},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TypeSelectView=t.CustomSelectView=void 0;class n extends HTMLElement{constructor(){super(),this.internalOptions=[];const e=this.attachShadow({mode:"open"}),t=document.createElement("style");"dark"===this.getAttribute("theme")?t.textContent="\n                button {\n                  font-size: 1rem;\n                text-align: start;\n                background-color: #222222;\n                border: none;\n                padding: 8px 8px;\n                color: white;\n                }\n                button:hover {\n                background-color: #333333;\n                }\n                button.selected {\n                background-color: #0077FF;\n                color: white;\n                }\n                .d-none { display: none; }\n                .d-block { display: block;}\n                .d-flex { display: flex; flex-direction: column;}\n                }\n           ":t.textContent="\nbutton {\ntext-align: start;\nbackground-color: #FFFFFF;\nborder: none;\npadding: 8px 8px;\ncolor: black;\nfont-size: 1rem;\n}\nbutton:hover {\nbackground-color: #F0F0F0;\n}\nbutton.selected {\nbackground-color: #0077FF;\ncolor: white;\n}\n.d-none { display: none; }\n.d-block { display: block;}\n.d-flex { display: flex; flex-direction: column;}\n}\n",e.innerHTML='<div><div id="options-list" style="display: flex; flex-direction: column;"></div></div>',e.appendChild(t)}static get observedAttributes(){return["selectedoptionindex","theme"]}set options(e){this.internalOptions=e;const t=this.shadowRoot.getElementById("options-list");t.innerText="";for(const n of e){const e=document.createElement("button");e.setAttribute("value",n.value),e.innerText=n.label,e.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("option-select",{detail:{value:n.value}}))})),t.appendChild(e)}console.debug("set options")}get options(){return this.internalOptions}attributeChangedCallback(e,t,n){if("selectedoptionindex"===e){const e=parseInt(n);if(e<0)return;for(const e of this.shadowRoot.getElementById("options-list").getElementsByTagName("button"))e.className="";this.shadowRoot.getElementById("options-list").getElementsByTagName("button").length>e&&(this.shadowRoot.getElementById("options-list").getElementsByTagName("button")[e].className="selected")}}}t.CustomSelectView=n;class o extends HTMLElement{constructor(){super(),this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],this.selectedOptionIndex=-1;const e=this.attachShadow({mode:"open"}),t=document.createElement("style"),n=this.getAttribute("theme");t.textContent="dark"===n?"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid rgba(0, 0, 0, 0.7);\nbackground-color: #333333;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #333333;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n        }\n        button#create-new:hover {\n          background-color: #505050;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.3);\n        }\n        input#search {\n          background-color: #303030;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 4px 4px;\n          border-radius: 0px;\n          border: 2px solid #303030;\n          padding: 8px 8px;\n          outline: none;\ncolor: white;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n":"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid #B0B0B0;\nbackground-color: white;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #FFFFFF;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n          color:black;\n          font-size: 1rem;\n        }\n        button#create-new:hover {\n          background-color: #F0F0F0;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.1);\n        }\n        input#search {\n          background-color: #FFFFFF;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 5px 5px;\n          border-radius: 0px;\n          border: 1px solid #707070;\n          padding: 8px 8px;\n          outline: none;\ncolor: black;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\nmargin: 4px;\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n";const o=this.getAttribute("placeholder")||"type here";e.innerHTML=`\n        <div id="root">\n          <form id="search-form" style="display: flex;">\n            <input id="search" type="text" placeholder=${o} style="width: 100%;" autocomplete="off"/>\n          </form>\n          <div id="sub" class="d-none">\n            <custom-select-view id="select-view" theme=${n}></custom-select-view>\n            <button id="create-new">Create </button>\n          </div>\n        </div>\n`,e.appendChild(t);const s=e.getElementById("search"),i=e.getElementById("search-form");s.oninput=e=>{this.onSearchInputChange(e.target.value)},s.onkeydown=e=>{const t=this.shadowRoot.getElementById("select-view").options;"ArrowUp"===e.key?(this.selectedOptionIndex-=1,this.selectedOptionIndex<0&&(this.selectedOptionIndex=0),this.selectedOptionIndex>=t.length&&(this.selectedOptionIndex=t.length-1),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"ArrowDown"===e.key?(this.selectedOptionIndex+=1,this.selectedOptionIndex<0&&(this.selectedOptionIndex=0),this.selectedOptionIndex>=t.length&&(this.selectedOptionIndex=t.length-1),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"Escape"===e.key&&this.onBlur()},i.onsubmit=e=>(this.onSearchFormSubmit(),!1),i.onfocus=()=>{this.onFocus()},s.onfocus=()=>{this.onFocus()},this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],s.onblur=()=>{},i.onblur=()=>{},this.options=this.Options,this.onblur=()=>{setTimeout((()=>{this.onBlur()}),10)},this.onfocus=()=>{this.onFocus()},e.getElementById("select-view").addEventListener("option-select",(e=>{const t=e.detail.value;this.onOptionSelected(t)})),this.shadowRoot.getElementById("sub").className="d-none";const r=this.shadowRoot.getElementById("create-new");r.addEventListener("click",(e=>{this.onCreateNewButtonClicked()})),r.className="d-none"}static get observedAttributes(){return["theme","placeholder"]}onSearchFormSubmit(){const e=this.shadowRoot.getElementById("select-view");1===this.shadowRoot.getElementById("select-view").options.length?this.onOptionSelected(e.options[0].value):this.selectedOptionIndex>=0&&this.selectedOptionIndex<=this.Options.length?this.onOptionSelected(this.options[this.selectedOptionIndex].value):"d-block"===this.shadowRoot.getElementById("create-new").className&&this.onCreateNewButtonClicked(),this.onBlur()}onCreateNewButtonClicked(){new Array(this.Options);const e={value:this.Options.length,label:this.shadowRoot.getElementById("search").value};this.Options.push(e),this.dispatchEvent(new CustomEvent("selection-options-change",{detail:{options:this.Options}})),this.onOptionSelected(e.value)}onOptionSelected(e){let t="",n=0;for(const o of this.Options)o.value===e&&(t=o.label,this.selectedOptionIndex=n,this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())),n+=1;this.shadowRoot.getElementById("search").value=t,this.dispatchEvent(new CustomEvent("type-select-change",{detail:{value:e}})),this.onBlur()}get currentLabel(){return this.shadowRoot.getElementById("search").value}onFocus(){this.shadowRoot.getElementById("sub").className="d-flex",this.shadowRoot.getElementById("search").focus()}onBlur(){this.shadowRoot.getElementById("search").blur(),this.shadowRoot.getElementById("sub").className="d-none"}setCreateNewButtonDisplay(e,t){const n=this.shadowRoot.getElementById("create-new");n.innerText=`Create: ${t}`,""!==t&&(e.length>1||1!==e.length||e[0].label!==t)?n.className="d-block":n.className="d-none"}onSearchInputChange(e){const t=this.Options.filter((t=>t.label.includes(e)));this.shadowRoot.getElementById("select-view").options=t,this.setCreateNewButtonDisplay(t,e)}set options(e){this.Options=e,this.shadowRoot.getElementById("select-view").options=e}get options(){return this.Options}set value(e){for(const t of this.options)t.value===e&&(this.shadowRoot.getElementById("search").value=t.label)}set selected(e){this.shadowRoot.getElementById("search").className=e?"selected":"not-selected"}}t.TypeSelectView=o},541:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TabSelection=void 0;const o=n(653);class s extends o.ComponentBase{constructor(){super(),this.currentSelectedIndex=-1,this.renderLabels()}static get observedAttributes(){return["theme","labels","optionindex"]}renderLabels(){const e=JSON.parse(this.getAttribute("labels")),t=this.shadowRoot.getElementById("root");if(t.innerText="",this.currentSelectedIndex<0){const e=parseInt(this.getAttribute("optionindex")||"0");this.currentSelectedIndex=e}let n=0;for(const o of e){const e=document.createElement("div"),s=n===this.currentSelectedIndex;e.setAttribute("class","tab-item-container "+(s?"selected":"not-selected")),e.innerHTML=`\n              <button class=${s?"selected":"not-selected"}>${o}</button>\n            `,t.appendChild(e);const i=n;e.addEventListener("click",(()=>{this.currentSelectedIndex=i,this.renderLabels(),this.dispatchEvent(new CustomEvent("option-select",{detail:{index:i,label:o}}))})),n+=1}}getStyle(){return"div#root {\n          display: grid;\n          gap: 0px;\n          grid-auto-columns: 1fr;\n          grid-auto-flow: column;\n          border-radius: 0px;\n        }\n        div#root.dark {\n          background-color: #1F1F1F;\n          border: 1px solid #505050;\n        }\n        div#root.light {\n          background-color: white;;\n          border: 1px solid transparent;\n        }\n        button {\n          appearance: none;\n          margin: 0px;\n          margin-right: auto;\n          margin-left: auto;\n          border: 0px;\n          padding: 4px 8px;\n          font-size: 0.8rem;\n          font-weight: bold;\n          font-family: system-ui;\n        }\n        div.light button {\n          background-color: transparent\n        }\n        div.dark button {\n          background-color: rgba(0, 0, 0, 0.0);\n        }\n        div.dark button.selected{\n          color: rgba(0, 0, 0, 1.0);\n          //background-color: rgba(0, 0, 0, 0.07);\n        }\n        div.dark button.not-selected{\n          color: rgba(255, 255, 255, 0.8);\n          //background-color: rgba(0, 0, 0, 0);\n        }\n        \n\n    div.light button.selected { color: white;}\n    div.light button.not-selected { color: #505050;}\n    div.selected, div.not-selected{\n      display: flex;\n      padding: 0px 4px;\nborder-radius: 0px;\ntransition: background-color 0.1s;\n    }\n    div.dark div.selected {\n      background-color: #AAAAAA;\n    }\n    div.dark div.not-selected {\n      background-color: rgba(0, 0, 0, 0.0);\n\n    }\n    div.dark div.not-selected:hover {\n      background-color: #303030;\n    }\ndiv.light div.not-selected:hover {background-color: rgba(0, 0, 0, 0.05);}\n    div.light div.selected {\nbackground-color: #0077FF;\n}\ndiv.light div.not-selected {\nbackground-color: #F7F7F7;\n}\n\n    "}renderHTML(){return`\n        <div id="root" class=${this.getAttribute("theme")||"light"}>\n        </div>\n        `}}t.TabSelection=s,customElements.define("tab-selection",s)}},t={};!function n(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0FDSSxNQUFPLGl6REE4RlhFLGFBQ0ksTUFBTyxrQ0FDZ0JULEtBQUt1QixhQUFhLFVBQVksc0NBSzdEOUIsRUFBUW9HLGFBQWVBLEVBQ3ZCcEUsZUFBZUMsT0FBTyxnQkFBaUJtRSxLQ2hKbkNZLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFuSCxRQUdyQixJQUFJcUgsRUFBU0wsRUFBeUJFLEdBQVksQ0FHakRsSCxRQUFTLElBT1YsT0FIQXNILEVBQW9CSixHQUFVRyxFQUFRQSxFQUFPckgsUUFBU2lILEdBRy9DSSxFQUFPckgsUSIsInNvdXJjZXMiOlsid2VicGFjazovL3djLWl0ZW1zLy4vc3JjL2Jhc2UudHMiLCJ3ZWJwYWNrOi8vd2MtaXRlbXMvLi9zcmMvYnV0dG9uLnRzIiwid2VicGFjazovL3djLWl0ZW1zLy4vc3JjL2NvbG9ycy50cyIsIndlYnBhY2s6Ly93Yy1pdGVtcy8uL3NyYy9pbnB1dHMudHMiLCJ3ZWJwYWNrOi8vd2MtaXRlbXMvLi9zcmMvbGlua0NvbXBvbmVudC50cyIsIndlYnBhY2s6Ly93Yy1pdGVtcy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL3djLWl0ZW1zLy4vc3JjL3NlbGVjdGlvbi50cyIsIndlYnBhY2s6Ly93Yy1pdGVtcy8uL3NyYy90YWJTZWxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vd2MtaXRlbXMvd2VicGFjay9ib290c3RyYXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBvbmVudEJhc2UgPSB2b2lkIDA7XG5jbGFzcyBDb21wb25lbnRCYXNlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBzaGFkb3cgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0aGlzLmdldFN0eWxlKCk7XG4gICAgICAgIHNoYWRvdy5pbm5lckhUTUwgPSB0aGlzLnJlbmRlckhUTUwoKTtcbiAgICAgICAgc2hhZG93LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gICAgZ2V0U3R5bGUoKSB7XG4gICAgICAgIHJldHVybiBgYDtcbiAgICB9XG4gICAgcmVuZGVySFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIGBgO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tcG9uZW50QmFzZSA9IENvbXBvbmVudEJhc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnV0dG9uSXRlbSA9IHZvaWQgMDtcbmNvbnN0IGJhc2VfMSA9IHJlcXVpcmUoXCIuL2Jhc2VcIik7XG5jbGFzcyBCdXR0b25JdGVtIGV4dGVuZHMgYmFzZV8xLkNvbXBvbmVudEJhc2Uge1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1wibGFiZWxcIiwgXCJ0aGVtZVwiLCBcIm9uY2xpY2tcIl07XG4gICAgfVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAobmFtZSA9PT0gXCJsYWJlbFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25cIikuaW5uZXJUZXh0ID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLmNsYXNzTmFtZSA9IGBmb2N1cyAke3RoaXMuZ2V0QXR0cmlidXRlKFwidGhlbWVcIil9YDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuY2xhc3NOYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFN0eWxlKCkge1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSAwO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IDA7XG4gICAgICAgIGNvbnN0IGhvdmVyQ29sb3IgPSBcIiM0OTgyREJcIjtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgZGl2I2NvbnRhaW5lciB7XG4gICAgICAgICAgd2lkdGg6MTAwJTtcbiAgICAgICAgICBwYWRkaW5nOiAke2JvcmRlcldpZHRofXB4O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Ym9yZGVyUmFkaXVzICsgMX1weDtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMXM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2I2NvbnRhaW5lci5mb2N1cyB7XG4gICAgICAgICAgLy8gYm9yZGVyLWNvbG9yOiAjMjY4NEZGNjA7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgIzI2ODRGRjYwO1xuICAgICAgICB9XG4gICAgICAgIGRpdiNjb250YWluZXIuYmctdHJhbnNwYXJlbnQuZm9jdXMge1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM3MDcwNzA7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4OEZGO1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBwYWRkaW5nOiA3cHggMTBweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlclJhZGl1cyAtIGJvcmRlcldpZHRofXB4O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMXM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2I2NvbnRhaW5lci5iZy10cmFuc3BhcmVudHtcbiAgICAgICAgICBib3JkZXItd2lkdGg6IDFweDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2hvdmVyQ29sb3J9O1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbiNidXR0b24uYmctdHJhbnNwYXJlbnQge1xuICAgICAgICAgIGNvbG9yOiBibGFjaztcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAjNzA3MDcwO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbiNidXR0b24uYmctdHJhbnNwYXJlbnQ6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2hvdmVyQ29sb3J9O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7aG92ZXJDb2xvcn07XG4gICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9XG4gICAgcmVuZGVySFRNTCgpIHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldEF0dHJpYnV0ZShcImxhYmVsXCIpO1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGlkPVwiY29udGFpbmVyXCIgY2xhc3M9JHt0aGlzLmdldEF0dHJpYnV0ZShcInRoZW1lXCIpfT5cbiAgICAgICAgICA8YnV0dG9uIGlkPVwiYnV0dG9uXCIgY2xhc3M9JHt0aGlzLmdldEF0dHJpYnV0ZShcInRoZW1lXCIpfSBvbmNsaWNrPSR7dGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGlja1wiKX0+JHtsYWJlbH08L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuZXhwb3J0cy5CdXR0b25JdGVtID0gQnV0dG9uSXRlbTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImJ1dHRvbi1jb21wb25lbnRcIiwgQnV0dG9uSXRlbSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sb3JzID0gdm9pZCAwO1xuY2xhc3MgQ29sb3JzIHtcbn1cbmV4cG9ydHMuQ29sb3JzID0gQ29sb3JzO1xuQ29sb3JzLkJMVUUgPSBcIiMwMDU1RkZcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UZXh0SW5wdXQgPSB2b2lkIDA7XG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xuY29uc3QgY29sb3JzXzEgPSByZXF1aXJlKFwiLi9jb2xvcnNcIik7XG5jbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBiYXNlXzEuQ29tcG9uZW50QmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnN0IGNhc2NhZGVFdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgICAgICAvLyB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImV2ZW50XCIpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzY2FkZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInRleHQtaW5wdXRcIik7XG4gICAgICAgIC8vaW5wdXRFbGVtZW50Lm9uaW5wdXQgPSAoZTogRXZlbnQpID0+IHtjYXNjYWRlRXZlbnQoZSl9O1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7IGNhc2NhZGVFdmVudChlKTsgfSk7XG4gICAgICAgIC8vIGlucHV0RWxlbWVudC5vbmtleWRvd24gPSAoZTogRXZlbnQpID0+IHtjYXNjYWRlRXZlbnQoZSl9O1xuICAgICAgICAvLyBpbnB1dEVsZW1lbnQub25rZXl1cCA9IChlOiBFdmVudCkgPT4ge2Nhc2NhZGVFdmVudChlKX07XG4gICAgfVxuICAgIG9uSW5wdXQoZSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uIGlucHV0XCIpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfVxuICAgIGdldFN0eWxlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICBkaXYjcm9vdCB7XG5wYWRkaW5nOiAwcHg7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgIG1hcmdpbjogNXB4O1xucGFkZGluZzogOHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM3MDcwNzA7XG50cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4xcztcbiAgICAgICAgfVxuICAgICAgICBpbnB1dDpmb2N1cy12aXNpYmxlIHtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjb2xvcnNfMS5Db2xvcnMuQkxVRX07XG4gICAgICAgIG1hcmdpbjogNHB4O1xub3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH1cbiAgICByZW5kZXJIVE1MKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGlkPVwicm9vdFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cInRleHQtaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPSR7dGhpcy5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSB8fCBcIlR5cGVcIn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuZXhwb3J0cy5UZXh0SW5wdXQgPSBUZXh0SW5wdXQ7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ0ZXh0LWlucHV0XCIsIFRleHRJbnB1dCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlua0NvbXBvbmVudCA9IHZvaWQgMDtcbmNvbnN0IGJhc2VfMSA9IHJlcXVpcmUoXCIuL2Jhc2VcIik7XG5jb25zdCBjb2xvcnNfMSA9IHJlcXVpcmUoXCIuL2NvbG9yc1wiKTtcbmNsYXNzIExpbmtDb21wb25lbnQgZXh0ZW5kcyBiYXNlXzEuQ29tcG9uZW50QmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIGdldFN0eWxlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICBhIHtcbiAgICAgICAgICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3JzXzEuQ29sb3JzLkJMVUV9O1xuICAgICAgICB9XG4gICAgICAgIGE6aG92ZXIge1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICB9XG4gICAgICAgIGE6dmlzaXRlZCB7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3JzXzEuQ29sb3JzLkJMVUV9O1xuICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuICAgIHJlbmRlckhUTUwoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxhIGhyZWY9JHt0aGlzLmdldEF0dHJpYnV0ZShcInRvXCIpfT4ke3RoaXMuZ2V0QXR0cmlidXRlKFwibGFiZWxcIil9PC9hPlxuICAgICAgICBgO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlua0NvbXBvbmVudCA9IExpbmtDb21wb25lbnQ7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJsaW5rLWNvbXBvbmVudFwiLCBMaW5rQ29tcG9uZW50KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DdXN0b21TZWxlY3RWaWV3ID0gZXhwb3J0cy5UeXBlU2VsZWN0VmlldyA9IHZvaWQgMDtcbmNvbnN0IHNlbGVjdGlvbl8xID0gcmVxdWlyZShcIi4vc2VsZWN0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZVNlbGVjdFZpZXdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGVjdGlvbl8xLlR5cGVTZWxlY3RWaWV3OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3VzdG9tU2VsZWN0Vmlld1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZWN0aW9uXzEuQ3VzdG9tU2VsZWN0VmlldzsgfSB9KTtcbnJlcXVpcmUoXCIuL2J1dHRvblwiKTtcbnJlcXVpcmUoXCIuL2xpbmtDb21wb25lbnRcIik7XG5yZXF1aXJlKFwiLi9pbnB1dHNcIik7XG5yZXF1aXJlKFwiLi90YWJTZWxlY3Rpb25cIik7XG4vLyBpbXBvcnQgeyBUYWJTZWxlY3Rpb24gfSBmcm9tICcuL3RhYlNlbGVjdGlvbic7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJjdXN0b20tc2VsZWN0LXZpZXdcIiwgc2VsZWN0aW9uXzEuQ3VzdG9tU2VsZWN0Vmlldyk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ0eXBlLXNlbGVjdC12aWV3XCIsIHNlbGVjdGlvbl8xLlR5cGVTZWxlY3RWaWV3KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlU2VsZWN0VmlldyA9IGV4cG9ydHMuQ3VzdG9tU2VsZWN0VmlldyA9IHZvaWQgMDtcbmNsYXNzIEN1c3RvbVNlbGVjdFZpZXcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICAgICAgICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjIyMjtcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDhweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnV0dG9uLnNlbGVjdGVkIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3N0ZGO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmQtbm9uZSB7IGRpc3BsYXk6IG5vbmU7IH1cbiAgICAgICAgICAgICAgICAuZC1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICAgICAgICAgICAgICAuZC1mbGV4IHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICBgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG5idXR0b24ge1xudGV4dC1hbGlnbjogc3RhcnQ7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xuYm9yZGVyOiBub25lO1xucGFkZGluZzogOHB4IDhweDtcbmNvbG9yOiBibGFjaztcbmZvbnQtc2l6ZTogMXJlbTtcbn1cbmJ1dHRvbjpob3ZlciB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRjBGMEYwO1xufVxuYnV0dG9uLnNlbGVjdGVkIHtcbmJhY2tncm91bmQtY29sb3I6ICMwMDc3RkY7XG5jb2xvcjogd2hpdGU7XG59XG4uZC1ub25lIHsgZGlzcGxheTogbm9uZTsgfVxuLmQtYmxvY2sgeyBkaXNwbGF5OiBibG9jazt9XG4uZC1mbGV4IHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjt9XG59XG5gO1xuICAgICAgICB9XG4gICAgICAgIHNoYWRvdy5pbm5lckhUTUwgPSBgPGRpdj48ZGl2IGlkPVwib3B0aW9ucy1saXN0XCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1wiPjwvZGl2PjwvZGl2PmA7XG4gICAgICAgIHNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1wic2VsZWN0ZWRvcHRpb25pbmRleFwiLCBcInRoZW1lXCJdO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgb3B0aW9uc0xpc3RDb250YWluZXIgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJvcHRpb25zLWxpc3RcIik7XG4gICAgICAgIG9wdGlvbnNMaXN0Q29udGFpbmVyLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5pbm5lclRleHQgPSBvcHRpb24ubGFiZWw7XG4gICAgICAgICAgICBvcHRpb25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcImRpc3BhdGNoIG9wdGlvbi1zZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIm9wdGlvbi1zZWxlY3RcIiwgeyBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb24udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIG9wdGlvbkVsZW1lbnQuc2V0QXR0cmlidXRlKFwib25jbGlja1wiLCBcImFsZXJ0KCdjbGljaycpXCIpO1xuICAgICAgICAgICAgb3B0aW9uc0xpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQob3B0aW9uRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcInNldCBvcHRpb25zXCIpO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxPcHRpb25zO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIpO1xuICAgICAgICBpZiAobmFtZSA9PT0gXCJzZWxlY3RlZG9wdGlvbmluZGV4XCIpIHtcbiAgICAgICAgICAgIC8vIHJlLWRyYXdcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uSW5kZXggPSBwYXJzZUludChuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb25JbmRleCA8IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcIm9wdGlvbnMtbGlzdFwiKS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJ1dHRvblwiKSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJvcHRpb25zLWxpc3RcIikuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJidXR0b25cIikubGVuZ3RoID4gc2VsZWN0ZWRPcHRpb25JbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcIm9wdGlvbnMtbGlzdFwiKS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJ1dHRvblwiKVtzZWxlY3RlZE9wdGlvbkluZGV4XS5jbGFzc05hbWUgPSBcInNlbGVjdGVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkN1c3RvbVNlbGVjdFZpZXcgPSBDdXN0b21TZWxlY3RWaWV3O1xuY2xhc3MgVHlwZVNlbGVjdFZpZXcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuT3B0aW9ucyA9IFtcbiAgICAgICAgICAgIHsgdmFsdWU6IDAsIGxhYmVsOiBcImRvZ1wiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiAxLCBsYWJlbDogXCJjYXRcIiB9LFxuICAgICAgICAgICAgeyB2YWx1ZTogMiwgbGFiZWw6IFwicmFiYml0XCIgfSxcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID0gLTE7XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBjb25zdCB0aGVtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGhlbWVcIik7XG4gICAgICAgIGlmICh0aGVtZSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICAgICBkaXYjcm9vdCB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgfVxuICAgICAgICBkaXYjc3ViIHtcbiAgICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6IDQ1cHg7XG4gICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDhweCk7XG4gICAgICAgICAgbWFyZ2luOiAwcHggNHB4O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC43KTtcbmJhY2tncm91bmQtY29sb3I6ICMzMzMzMzM7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uI2NyZWF0ZS1uZXcge1xuICAgICAgICAgIHRleHQtYWxpZ246IHN0YXJ0O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzMzMzM7XG5jb2xvcjogd2hpdGU7XG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgIHBhZGRpbmc6IDhweCA0cHg7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uI2NyZWF0ZS1uZXc6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1MDUwNTA7XG4gICAgICAgIH1cbiAgICAgICAgLmQtbm9uZSB7IGRpc3BsYXk6IG5vbmU7IH1cbiAgICAgICAgLmQtYmxvY2sgeyBkaXNwbGF5OiBibG9jazt9XG4gICAgICAgIGRpdiNzdWIuZC1mbGV4IHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCA1cHggNXB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCNzZWFyY2gge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDMwMzA7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMXM7XG4gICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgIG1hcmdpbjogNHB4IDRweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgIzMwMzAzMDtcbiAgICAgICAgICBwYWRkaW5nOiA4cHggOHB4O1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG5jb2xvcjogd2hpdGU7XG59ICAgIGlucHV0I3NlYXJjaDpmb2N1cy12aXNpYmxlIHtcbmJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMTAwLCAxNzAsIDI1NSwgMC43KTtcbm91dGxpbmUtd2lkdGg6IDA7XG59XG5pbnB1dCNzZWFyY2guc2VsZWN0ZWQge1xuY29sb3I6ICNGRjMzMTE7XG5ib3JkZXItY29sb3I6ICNGRjMzMTE7XG59XG5gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgICAgIGRpdiNyb290IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGRpdiNzdWIge1xuICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogNDVweDtcbiAgICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gOHB4KTtcbiAgICAgICAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI0IwQjBCMDtcbmJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbiNjcmVhdGUtbmV3IHtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBzdGFydDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xuY29sb3I6IHdoaXRlO1xuICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICBwYWRkaW5nOiA4cHggNHB4O1xuICAgICAgICAgIGNvbG9yOmJsYWNrO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b24jY3JlYXRlLW5ldzpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0YwRjBGMDtcbiAgICAgICAgfVxuICAgICAgICAuZC1ub25lIHsgZGlzcGxheTogbm9uZTsgfVxuICAgICAgICAuZC1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICAgICAgZGl2I3N1Yi5kLWZsZXgge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDVweCA1cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0I3NlYXJjaCB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4xcztcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgbWFyZ2luOiA1cHggNXB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNzA3MDcwO1xuICAgICAgICAgIHBhZGRpbmc6IDhweCA4cHg7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbmNvbG9yOiBibGFjaztcbn0gICAgaW5wdXQjc2VhcmNoOmZvY3VzLXZpc2libGUge1xuYm9yZGVyOiAycHggc29saWQgcmdiYSgxMDAsIDE3MCwgMjU1LCAwLjcpO1xubWFyZ2luOiA0cHg7XG5vdXRsaW5lLXdpZHRoOiAwO1xufVxuaW5wdXQjc2VhcmNoLnNlbGVjdGVkIHtcbmNvbG9yOiAjRkYzMzExO1xuYm9yZGVyLWNvbG9yOiAjRkYzMzExO1xufVxuYDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikgfHwgXCJ0eXBlIGhlcmVcIjtcbiAgICAgICAgc2hhZG93LmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBpZD1cInJvb3RcIj5cbiAgICAgICAgICA8Zm9ybSBpZD1cInNlYXJjaC1mb3JtXCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4O1wiPlxuICAgICAgICAgICAgPGlucHV0IGlkPVwic2VhcmNoXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSBzdHlsZT1cIndpZHRoOiAxMDAlO1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgPGRpdiBpZD1cInN1YlwiIGNsYXNzPVwiZC1ub25lXCI+XG4gICAgICAgICAgICA8Y3VzdG9tLXNlbGVjdC12aWV3IGlkPVwic2VsZWN0LXZpZXdcIiB0aGVtZT0ke3RoZW1lfT48L2N1c3RvbS1zZWxlY3Qtdmlldz5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJjcmVhdGUtbmV3XCI+Q3JlYXRlIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbmA7XG4gICAgICAgIHNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIGNvbnN0IHNlYXJjaEVsZW1lbnQgPSBzaGFkb3cuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2hcIik7XG4gICAgICAgIGNvbnN0IHNlYXJjaEZvcm1FbGVtZW50ID0gc2hhZG93LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoLWZvcm1cIik7XG4gICAgICAgIHNlYXJjaEVsZW1lbnQub25pbnB1dCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvbmlucHV0XCIpO1xuICAgICAgICAgICAgdGhpcy5vblNlYXJjaElucHV0Q2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHNlYXJjaEVsZW1lbnQub25rZXlkb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uIGtleSBkb3duXCIpO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LXZpZXdcIikub3B0aW9ucztcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dVcFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4IC09IDE7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA8IDApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA+PSBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2hcIikuYmx1cigpO1xuICAgICAgICAgICAgICAgIC8vIHNldFRpbWVvdXQoKCk9Pnt0aGlzLm9uRm9jdXMoKTt9LCAyMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkZvY3VzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LXZpZXdcIikuc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRvcHRpb25pbmRleFwiLCB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4IDwgMClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID49IGZpbHRlcmVkT3B0aW9ucy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA9IGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS5ibHVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkZvY3VzKCk7XG4gICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dCgoKT0+e3RoaXMub25Gb2N1cygpO30sIDIwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZG9wdGlvbmluZGV4XCIsIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub25CbHVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNlYXJjaEZvcm1FbGVtZW50Lm9uc3VibWl0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uU2VhcmNoRm9ybVN1Ym1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBzZWFyY2hGb3JtRWxlbWVudC5vbmZvY3VzID0gKCkgPT4geyB0aGlzLm9uRm9jdXMoKTsgfTtcbiAgICAgICAgc2VhcmNoRWxlbWVudC5vbmZvY3VzID0gKCkgPT4geyB0aGlzLm9uRm9jdXMoKTsgfTtcbiAgICAgICAgdGhpcy5PcHRpb25zID0gW1xuICAgICAgICAgICAgeyB2YWx1ZTogMCwgbGFiZWw6IFwiZG9nXCIgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IDEsIGxhYmVsOiBcImNhdFwiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiAyLCBsYWJlbDogXCJyYWJiaXRcIiB9LFxuICAgICAgICBdO1xuICAgICAgICBzZWFyY2hFbGVtZW50Lm9uYmx1ciA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2VhcmNoIGJsdXJcIik7XG4gICAgICAgICAgICAvL3RoaXMub25CbHVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHNlYXJjaEZvcm1FbGVtZW50Lm9uYmx1ciA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2VhcmNoIGZvcm0gYmx1clwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5PcHRpb25zO1xuICAgICAgICB0aGlzLm9uYmx1ciA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidGhpcyBibHVyXCIpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkJsdXIoKTtcbiAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIC8vIHRoaXMub25CbHVyKClcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbmZvY3VzID0gKCkgPT4geyB0aGlzLm9uRm9jdXMoKTsgfTtcbiAgICAgICAgc2hhZG93LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LXZpZXdcIikuYWRkRXZlbnRMaXN0ZW5lcihcIm9wdGlvbi1zZWxlY3RcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwicmVjZWl2ZWQgb3B0aW9uLXNlbGVjdFwiKTtcbiAgICAgICAgICAgIC8vIEJVRzogc2FmYXJp44Gn44GvaW5wdXTjgavjg5Xjgqnjg7zjgqvjgrnjgYzjgYLjgaPjgZ/jgabjgYTjgovjgajjgIHjgq/jg6rjg4Pjgq/jgqTjg5njg7Pjg4jjgYzotbfjgY3jgarjgYTjgIJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsdWUgPSBldmVudC5kZXRhaWwudmFsdWU7XG4gICAgICAgICAgICB0aGlzLm9uT3B0aW9uU2VsZWN0ZWQoKHNlbGVjdGVkVmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInN1YlwiKS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImRpc3BsYXk6IG5vbmU7XCIpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzdWJcIikuY2xhc3NOYW1lID0gXCJkLW5vbmVcIjtcbiAgICAgICAgY29uc3QgY3JlYXRlTmV3QnV0dG9uID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiY3JlYXRlLW5ld1wiKTtcbiAgICAgICAgY3JlYXRlTmV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHsgdGhpcy5vbkNyZWF0ZU5ld0J1dHRvbkNsaWNrZWQoKTsgfSk7XG4gICAgICAgIGNyZWF0ZU5ld0J1dHRvbi5jbGFzc05hbWUgPSBcImQtbm9uZVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcInRoZW1lXCIsIFwicGxhY2Vob2xkZXJcIl07XG4gICAgfVxuICAgIG9uU2VhcmNoRm9ybVN1Ym1pdCgpIHtcbiAgICAgICAgLy8gY3JlYXRlIG9yIHNldFxuICAgICAgICBjb25zdCBzZWxlY3RWaWV3ID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LXZpZXdcIik7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5vcHRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5vbk9wdGlvblNlbGVjdGVkKHNlbGVjdFZpZXcub3B0aW9uc1swXVtcInZhbHVlXCJdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPj0gMCAmJiB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPD0gdGhpcy5PcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5vbk9wdGlvblNlbGVjdGVkKHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXhdW1widmFsdWVcIl0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImNyZWF0ZS1uZXdcIikuY2xhc3NOYW1lID09PSBcImQtYmxvY2tcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub25DcmVhdGVOZXdCdXR0b25DbGlja2VkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkJsdXIoKTtcbiAgICB9XG4gICAgb25DcmVhdGVOZXdCdXR0b25DbGlja2VkKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbmV3IEFycmF5KHRoaXMuT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG5ld09wdGlvbiA9IHtcbiAgICAgICAgICAgIFwidmFsdWVcIjogdGhpcy5PcHRpb25zLmxlbmd0aCxcbiAgICAgICAgICAgIFwibGFiZWxcIjogdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLnZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBvcHRpb25zLmxlbmd0aD0ke3RoaXMuT3B0aW9ucy5sZW5ndGh9YCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld09wdGlvbik7XG4gICAgICAgIC8vIG9wdGlvbnMucHVzaChuZXdPcHRpb24pO1xuICAgICAgICB0aGlzLk9wdGlvbnMucHVzaChuZXdPcHRpb24pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwic2VsZWN0aW9uLW9wdGlvbnMtY2hhbmdlXCIsIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMuT3B0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMub25PcHRpb25TZWxlY3RlZChuZXdPcHRpb24udmFsdWUpO1xuICAgIH1cbiAgICBvbk9wdGlvblNlbGVjdGVkKHZhbHVlKSB7XG4gICAgICAgIGxldCBsYWJlbCA9IFwiXCI7XG4gICAgICAgIGxldCBvcHRpb25JbmRleCA9IDA7XG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIHRoaXMuT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSBvcHRpb25JbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZG9wdGlvbmluZGV4XCIsIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbkluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLnZhbHVlID0gbGFiZWw7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJ0eXBlLXNlbGVjdC1jaGFuZ2VcIiwgeyBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0gfSkpO1xuICAgICAgICB0aGlzLm9uQmx1cigpO1xuICAgIH1cbiAgICBnZXQgY3VycmVudExhYmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLnZhbHVlO1xuICAgIH1cbiAgICBvbkZvY3VzKCkge1xuICAgICAgICAvLyB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzdWJcIikuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJkaXNwbGF5OiBibG9jaztcIik7XG4gICAgICAgIC8vIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInN1YlwiKS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImRpc3BsYXk6IGZsZXg7XCIpO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzdWJcIikuY2xhc3NOYW1lID0gXCJkLWZsZXhcIjtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLmZvY3VzKCk7XG4gICAgfVxuICAgIG9uQmx1cigpIHtcbiAgICAgICAgLy8gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic3ViXCIpLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZGlzcGxheTogbm9uZTtcIik7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS5ibHVyKCk7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInN1YlwiKS5jbGFzc05hbWUgPSBcImQtbm9uZVwiO1xuICAgIH1cbiAgICBzZXRDcmVhdGVOZXdCdXR0b25EaXNwbGF5KGZpbHRlcmVkT3B0aW9ucywgc2VhcmNoUXVlcnkpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlTmV3QnV0dG9uID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiY3JlYXRlLW5ld1wiKTtcbiAgICAgICAgY3JlYXRlTmV3QnV0dG9uLmlubmVyVGV4dCA9IGBDcmVhdGU6ICR7c2VhcmNoUXVlcnl9YDtcbiAgICAgICAgaWYgKHNlYXJjaFF1ZXJ5ID09PSBcIlwiKSB7XG4gICAgICAgICAgICBjcmVhdGVOZXdCdXR0b24uY2xhc3NOYW1lID0gXCJkLW5vbmVcIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNyZWF0ZU5ld0J1dHRvbi5jbGFzc05hbWUgPSBcImQtYmxvY2tcIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyZWRPcHRpb25zWzBdW1wibGFiZWxcIl0gPT09IHNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlTmV3QnV0dG9uLmNsYXNzTmFtZSA9IFwiZC1ub25lXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZU5ld0J1dHRvbi5jbGFzc05hbWUgPSBcImQtYmxvY2tcIjtcbiAgICB9XG4gICAgb25TZWFyY2hJbnB1dENoYW5nZShzZWFyY2hRdWVyeSkge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSB0aGlzLk9wdGlvbnMuZmlsdGVyKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25bXCJsYWJlbFwiXS5pbmNsdWRlcyhzZWFyY2hRdWVyeSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Qtdmlld1wiKS5vcHRpb25zID0gZmlsdGVyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnNldENyZWF0ZU5ld0J1dHRvbkRpc3BsYXkoZmlsdGVyZWRPcHRpb25zLCBzZWFyY2hRdWVyeSk7XG4gICAgICAgIC8vIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImNyZWF0ZS1uZXdcIikuaW5uZXJUZXh0ID0gYOaWsOimj+S9nOaIkDogJHtzZWFyY2hRdWVyeX1gO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlbGVjdC12aWV3XCIpLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuT3B0aW9ucztcbiAgICB9XG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbltcInZhbHVlXCJdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS52YWx1ZSA9IG9wdGlvbltcImxhYmVsXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBzZWxlY3RlZChzZWxlY3RlZCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNldCBzZWxlY3RlZFwiKTtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLmNsYXNzTmFtZSA9IHNlbGVjdGVkID8gXCJzZWxlY3RlZFwiIDogXCJub3Qtc2VsZWN0ZWRcIjtcbiAgICB9XG59XG5leHBvcnRzLlR5cGVTZWxlY3RWaWV3ID0gVHlwZVNlbGVjdFZpZXc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGFiU2VsZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgYmFzZV8xID0gcmVxdWlyZShcIi4vYmFzZVwiKTtcbmNsYXNzIFRhYlNlbGVjdGlvbiBleHRlbmRzIGJhc2VfMS5Db21wb25lbnRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnJlbmRlckxhYmVscygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcInRoZW1lXCIsIFwibGFiZWxzXCIsIFwib3B0aW9uaW5kZXhcIl07XG4gICAgfVxuICAgIHJlbmRlckxhYmVscygpIHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZShcImxhYmVsc1wiKSk7XG4gICAgICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKTtcbiAgICAgICAgcm9vdEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFNlbGVjdGVkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gcGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoXCJvcHRpb25pbmRleFwiKSB8fCBcIjBcIik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGxhYmVsIG9mIGxhYmVscykge1xuICAgICAgICAgICAgY29uc3QgbGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsU2VsZWN0ZWQgPSAoaW5kZXggPT09IHRoaXMuY3VycmVudFNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgbGFiZWxFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGB0YWItaXRlbS1jb250YWluZXIgJHtsYWJlbFNlbGVjdGVkID8gJ3NlbGVjdGVkJyA6ICdub3Qtc2VsZWN0ZWQnfWApO1xuICAgICAgICAgICAgbGFiZWxFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ke2xhYmVsU2VsZWN0ZWQgPyBcInNlbGVjdGVkXCIgOiBcIm5vdC1zZWxlY3RlZFwifT4ke2xhYmVsfTwvYnV0dG9uPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsRWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCBmaW5hbEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3RlZEluZGV4ID0gZmluYWxJbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxhYmVscygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJvcHRpb24tc2VsZWN0XCIsIHsgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogZmluYWxJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICAgICAgICAgICAgICB9IH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIGBkaXYjcm9vdCB7XG4gICAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgICBnYXA6IDBweDtcbiAgICAgICAgICBncmlkLWF1dG8tY29sdW1uczogMWZyO1xuICAgICAgICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICB9XG4gICAgICAgIGRpdiNyb290LmRhcmsge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxRjFGMUY7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzUwNTA1MDtcbiAgICAgICAgfVxuICAgICAgICBkaXYjcm9vdC5saWdodCB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICAgICAgYm9yZGVyOiAwcHg7XG4gICAgICAgICAgcGFkZGluZzogNHB4IDhweDtcbiAgICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICAgICAgICB9XG4gICAgICAgIGRpdi5saWdodCBidXR0b24ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XG4gICAgICAgIH1cbiAgICAgICAgZGl2LmRhcmsgYnV0dG9uIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMCk7XG4gICAgICAgIH1cbiAgICAgICAgZGl2LmRhcmsgYnV0dG9uLnNlbGVjdGVke1xuICAgICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDEuMCk7XG4gICAgICAgICAgLy9iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDcpO1xuICAgICAgICB9XG4gICAgICAgIGRpdi5kYXJrIGJ1dHRvbi5ub3Qtc2VsZWN0ZWR7XG4gICAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcbiAgICAgICAgICAvL2JhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICBkaXYubGlnaHQgYnV0dG9uLnNlbGVjdGVkIHsgY29sb3I6IHdoaXRlO31cbiAgICBkaXYubGlnaHQgYnV0dG9uLm5vdC1zZWxlY3RlZCB7IGNvbG9yOiAjNTA1MDUwO31cbiAgICBkaXYuc2VsZWN0ZWQsIGRpdi5ub3Qtc2VsZWN0ZWR7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgcGFkZGluZzogMHB4IDRweDtcbmJvcmRlci1yYWRpdXM6IDBweDtcbnRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xcztcbiAgICB9XG4gICAgZGl2LmRhcmsgZGl2LnNlbGVjdGVkIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUE7XG4gICAgfVxuICAgIGRpdi5kYXJrIGRpdi5ub3Qtc2VsZWN0ZWQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjApO1xuXG4gICAgfVxuICAgIGRpdi5kYXJrIGRpdi5ub3Qtc2VsZWN0ZWQ6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMzAzMDtcbiAgICB9XG5kaXYubGlnaHQgZGl2Lm5vdC1zZWxlY3RlZDpob3ZlciB7YmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA1KTt9XG4gICAgZGl2LmxpZ2h0IGRpdi5zZWxlY3RlZCB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3N0ZGO1xufVxuZGl2LmxpZ2h0IGRpdi5ub3Qtc2VsZWN0ZWQge1xuYmFja2dyb3VuZC1jb2xvcjogI0Y3RjdGNztcbn1cblxuICAgIGA7XG4gICAgICAgIC8vIHJldHVybiBgXG4gICAgICAgIC8vIGRpdiNyb290e1xuICAgICAgICAvLyAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIC8vICAgZ3JpZC1hdXRvLWNvbHVtbnM6IDFmcjtcbiAgICAgICAgLy8gICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGRpdi50YWItaXRlbS1jb250YWluZXIge1xuICAgICAgICAvLyAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIC8vICAganVzdGlmeS1pdGVtczogc3RyZXRjaDtcbiAgICAgICAgLy8gICBwYWRkaW5nOiAwcHggOHB4O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGRpdi50YWItaXRlbS1jb250YWluZXIuc2VsZWN0ZWQge1xuICAgICAgICAvLyAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBkaXYudGFiLWl0ZW0tY29udGFpbmVyIGJ1dHRvbiB7XG4gICAgICAgIC8vICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIC8vICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjtcbiAgICAgICAgLy8gICBvdXRsaW5lOiBub25lO1xuICAgICAgICAvLyAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBkaXYudGFiLWl0ZW0tY29udGFpbmVyIGJ1dHRvbjpob3ZlciB7XG4gICAgICAgIC8vICAgYmFja2dyb3VuZC1jb2xvcjogI0YwRjBGMDtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyAgIGA7XG4gICAgfVxuICAgIHJlbmRlckhUTUwoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxkaXYgaWQ9XCJyb290XCIgY2xhc3M9JHt0aGlzLmdldEF0dHJpYnV0ZShcInRoZW1lXCIpIHx8IFwibGlnaHRcIn0+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cbmV4cG9ydHMuVGFiU2VsZWN0aW9uID0gVGFiU2VsZWN0aW9uO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidGFiLXNlbGVjdGlvblwiLCBUYWJTZWxlY3Rpb24pO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbXBvbmVudEJhc2UiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJzaGFkb3ciLCJ0aGlzIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInN0eWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJnZXRTdHlsZSIsImlubmVySFRNTCIsInJlbmRlckhUTUwiLCJhcHBlbmRDaGlsZCIsIkJ1dHRvbkl0ZW0iLCJiYXNlXzEiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInNoYWRvd1Jvb3QiLCJnZXRFbGVtZW50QnlJZCIsImlubmVyVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJsYWJlbCIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiQ29sb3JzIiwiQkxVRSIsIlRleHRJbnB1dCIsImNvbG9yc18xIiwiY2FzY2FkZUV2ZW50IiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiYmluZCIsImUiLCJvbklucHV0IiwiTGlua0NvbXBvbmVudCIsInNlbGVjdGlvbl8xIiwiQ3VzdG9tU2VsZWN0VmlldyIsIlR5cGVTZWxlY3RWaWV3IiwiaW50ZXJuYWxPcHRpb25zIiwib3B0aW9ucyIsIm9wdGlvbnNMaXN0Q29udGFpbmVyIiwib3B0aW9uIiwib3B0aW9uRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImRldGFpbCIsImRlYnVnIiwic2VsZWN0ZWRPcHRpb25JbmRleCIsInBhcnNlSW50IiwiZWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwiT3B0aW9ucyIsInRoZW1lIiwicGxhY2Vob2xkZXIiLCJzZWFyY2hFbGVtZW50Iiwic2VhcmNoRm9ybUVsZW1lbnQiLCJvbmlucHV0Iiwib25TZWFyY2hJbnB1dENoYW5nZSIsInRhcmdldCIsIm9ua2V5ZG93biIsImZpbHRlcmVkT3B0aW9ucyIsImtleSIsIm9uRm9jdXMiLCJ0b1N0cmluZyIsIm9uQmx1ciIsIm9uc3VibWl0Iiwib25TZWFyY2hGb3JtU3VibWl0Iiwib25mb2N1cyIsIm9uYmx1ciIsInNldFRpbWVvdXQiLCJzZWxlY3RlZFZhbHVlIiwib25PcHRpb25TZWxlY3RlZCIsImNyZWF0ZU5ld0J1dHRvbiIsIm9uQ3JlYXRlTmV3QnV0dG9uQ2xpY2tlZCIsInNlbGVjdFZpZXciLCJBcnJheSIsIm5ld09wdGlvbiIsInB1c2giLCJvcHRpb25JbmRleCIsImN1cnJlbnRMYWJlbCIsImZvY3VzIiwiYmx1ciIsInNldENyZWF0ZU5ld0J1dHRvbkRpc3BsYXkiLCJzZWFyY2hRdWVyeSIsImZpbHRlciIsImluY2x1ZGVzIiwic2VsZWN0ZWQiLCJUYWJTZWxlY3Rpb24iLCJjdXJyZW50U2VsZWN0ZWRJbmRleCIsInJlbmRlckxhYmVscyIsImxhYmVscyIsIkpTT04iLCJwYXJzZSIsInJvb3RFbGVtZW50Iiwic2VsZWN0ZWRJbmRleCIsImluZGV4IiwibGFiZWxFbGVtZW50IiwibGFiZWxTZWxlY3RlZCIsImZpbmFsSW5kZXgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==