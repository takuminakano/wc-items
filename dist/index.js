(()=>{"use strict";var n={653:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ComponentBase=void 0;class t extends HTMLElement{constructor(){super();const n=this.attachShadow({mode:"open"}),e=document.createElement("style");e.textContent=this.getStyle(),n.innerHTML=this.renderHTML(),n.appendChild(e)}renderAll(){const n=document.createElement("style");n.textContent=this.getStyle(),this.shadowRoot.innerHTML=this.renderHTML(),this.shadowRoot.appendChild(n)}getStyle(){return""}renderHTML(){return""}}e.ComponentBase=t},881:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ButtonItem=void 0;const o=t(653);class i extends o.ComponentBase{static get observedAttributes(){return["label","theme","onclick"]}attributeChangedCallback(n,e,t){e!=t&&"label"===n&&(this.shadowRoot.getElementById("button").innerText=t)}constructor(){super(),this.shadowRoot.getElementById("button").addEventListener("focus",(()=>{this.shadowRoot.getElementById("container").className=`focus ${this.getAttribute("theme")}`})),this.shadowRoot.getElementById("button").addEventListener("blur",(()=>{this.shadowRoot.getElementById("container").className=this.getAttribute("theme")}))}getStyle(){return"\n        div#container {\n          width:100%;\n          padding: 0px;\n          border: 2px solid transparent;\n          border-radius: 1px;\n          transition: background-color 0.1s;\n        }\n        div#container.focus {\n          // border-color: #2684FF60;\n          border: 2px solid #2684FF60;\n        }\n        div#container.bg-transparent.focus {\n          border: 1px solid #707070;\n        }\n        button{\n          font-size: 1rem;\n          width: 100%;\n          background-color: #0088FF;\n          color: white;\n          padding: 7px 10px;\n          border-radius: 0px;\n          border: 2px solid transparent;\n          appearance: none;\n          outline: none;\n          transition: background-color 0.1s;\n        }\n        div#container.bg-transparent{\n          border-width: 1px;\n        }\n        button#button:hover {\n          background-color: #4982DB;\n        }\n        button#button.bg-transparent {\n          color: black;\n          background-color: transparent;\n          border: 2px solid #707070;\n        }\n        button#button.bg-transparent:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n        button:focus {\n          border: 2px solid #4982DB;\n          background-color: #4982DB;\n        }\n        "}renderHTML(){const n=this.getAttribute("label");return`\n        <div id="container" class=${this.getAttribute("theme")}>\n          <button id="button" class=${this.getAttribute("theme")} onclick=${this.getAttribute("click")}>${n}</button>\n        </div>\n        `}}e.ButtonItem=i,customElements.define("button-component",i)},550:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Colors=void 0;class t{}e.Colors=t,t.BLUE="#0055FF"},483:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TextInput=void 0;const o=t(653),i=t(550);class s extends o.ComponentBase{constructor(){super();const n=n=>{console.log(this),this.dispatchEvent(new CustomEvent("event"))};n.bind(this),this.shadowRoot.getElementById("text-input").addEventListener("click",(e=>{n()}))}onInput(n){this.dispatchEvent(n)}getStyle(){return`\n        div#root {\npadding: 0px;\n        }\n        input{\n        background-color: transparent;\n        font-size: 1rem;\n        margin: 5px;\npadding: 8px;\n        border-radius: 0px;\n        border: 1px solid #707070;\ntransition: border-color 0.1s;\n        }\n        input:focus-visible {\n        border: 2px solid ${i.Colors.BLUE};\n        margin: 4px;\noutline: none;\n        }\n        `}renderHTML(){return`\n        <div id="root">\n          <input id="text-input" type="text" placeholder=${this.getAttribute("placeholder")||"Type"} />\n        </div>\n        `}}e.TextInput=s,customElements.define("text-input",s)},723:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinkComponent=void 0;const o=t(653),i=t(550);class s extends o.ComponentBase{constructor(){super()}getStyle(){return`\n        a {\n          font-family: system-ui;\n          font-size: 1rem;\n          text-decoration: none;\n          color: ${i.Colors.BLUE};\n        }\n        a:hover {\n          text-decoration: underline;\n        }\n        a:visited {\n          color: ${i.Colors.BLUE};\n        }\n        `}renderHTML(){return`\n        <a href=${this.getAttribute("to")}>${this.getAttribute("label")}</a>\n        `}}e.LinkComponent=s,customElements.define("link-component",s)},519:(n,e,t)=>{const o=t(522);t(881),t(723),t(483),t(541),t(66),t(54),customElements.define("custom-select-view",o.CustomSelectView),customElements.define("type-select-view",o.TypeSelectView)},66:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HoverNotification=void 0;const o=t(653),i=t(550);class s extends o.ComponentBase{getStyle(){return`\ndiv#container {\nfont-family: system-ui;\nposition: fixed;\nbottom: 24px;\nright: 24px;\nwidth: 250px;\nbackground-color: #101010;\nborder-radius: 16px;\nborder: 1px solid #303030;\nbox-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.1);\npadding: 8px 8px;\ndisplay: flex;\nflex-direction: column;\n}\ndiv#container.light {\nbackground-color: #FFFFFF;\nborder-color: rgba(0, 0, 0, 0.15);\nbox-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.05);\n}\nspan {\ncolor: white;\nfont-family: system-ui;\n}\ndiv#container.light span { color: black;}\nspan#title {\nfont-weight: bold;\nfont-size: 16px;\n}\nspan#content {\nfont-size: 14px;\ncolor: #A0A0A0;\n}\n.d-none {\ndisplay: none;\n}\n.d-block {\ndisplay:block;\n}\n.d-flex{\ndisplay: flex;\n}\nbutton{\nbackground-color: #4982DB;\nborder-radius: 50px;\ncolor: white;\nborder: none;\noutline: none;\npadding: 4px 8px;\n}\nbutton#button-dismiss {\nbackground-color: transparent;\ncolor: ${i.Colors.BLUE};\nborder: 1px solid ${i.Colors.BLUE};\n}\ndiv.dark button#button-dismiss {\ncolor: white;\nbackground-color: rgba(255, 255, 255, 0.2);\nborder-color: transparent;\n}\ndiv#container.d-none {\ndisplay: none;\n}\ndiv.light button#button-dismiss:hover {\nbackground-color: #F0F0F0;\n}\ndiv.dark button#button-dismiss:hover {\nbackground-color: rgba(255, 255, 255, 0.1);\n}\n`}renderHTML(){return`\n        <div id="container" class="${this.getAttribute("theme")||"light"} d-none">\n          <div style="display: flex; flex-direction: column; padding: 8px 8px;">\n            <span id="title">Notification Title</span>\n            <span id="content">Notification content</span>\n          </div>\n          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin: 8px 8px;">\n            <button id="button-ok">OK</buton>\n            <button id="button-dismiss">Dismiss</button>\n          </div>\n        </div>\n        `}constructor(){super(),this.shadowRoot.getElementById("button-dismiss").addEventListener("click",(()=>{this.hide(),this.dispatchEvent(new CustomEvent("dismiss-clicked"))})),this.shadowRoot.getElementById("button-ok").addEventListener("click",(()=>{this.hide(),this.dispatchEvent(new CustomEvent("ok-clicked"))}))}show(n,e){this.title=n,this.message=e,this.showContainer(),setTimeout((()=>{this.hide()}),5e3)}set title(n){this.shadowRoot.getElementById("title").innerText=n}set message(n){this.shadowRoot.getElementById("content").innerText=n}showContainer(){const n=this.getAttribute("theme")||"light";this.shadowRoot.getElementById("container").className=`${n}`}hide(){const n=this.getAttribute("theme")||"light";this.shadowRoot.getElementById("container").className=`${n} d-none`}}e.HoverNotification=s,customElements.define("hover-notification",s)},522:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TypeSelectView=e.CustomSelectView=void 0;class t extends HTMLElement{constructor(){super(),this.internalOptions=[];const n=this.attachShadow({mode:"open"}),e=document.createElement("style");"dark"===this.getAttribute("theme")?e.textContent="\n                button {\n                  font-size: 1rem;\n                text-align: start;\n                background-color: #222222;\n                border: none;\n                padding: 8px 8px;\n                color: white;\n                }\n                button:hover {\n                background-color: #333333;\n                }\n                button.selected {\n                background-color: #0077FF;\n                color: white;\n                }\n                .d-none { display: none; }\n                .d-block { display: block;}\n                .d-flex { display: flex; flex-direction: column;}\n                }\n           ":e.textContent="\nbutton {\ntext-align: start;\nbackground-color: #FFFFFF;\nborder: none;\npadding: 8px 8px;\ncolor: black;\nfont-size: 1rem;\n}\nbutton:hover {\nbackground-color: #F0F0F0;\n}\nbutton.selected {\nbackground-color: #0077FF;\ncolor: white;\n}\n.d-none { display: none; }\n.d-block { display: block;}\n.d-flex { display: flex; flex-direction: column;}\n}\n",n.innerHTML='<div><div id="options-list" style="display: flex; flex-direction: column;"></div></div>',n.appendChild(e)}static get observedAttributes(){return["selectedoptionindex","theme"]}renderAll(){const n=document.createElement("style");"dark"===this.getAttribute("theme")?n.textContent="\n                button {\n                  font-size: 1rem;\n                text-align: start;\n                background-color: #222222;\n                border: none;\n                padding: 8px 8px;\n                color: white;\n                }\n                button:hover {\n                background-color: #333333;\n                }\n                button.selected {\n                background-color: #0077FF;\n                color: white;\n                }\n                .d-none { display: none; }\n                .d-block { display: block;}\n                .d-flex { display: flex; flex-direction: column;}\n                }\n           ":n.textContent="\nbutton {\ntext-align: start;\nbackground-color: #FFFFFF;\nborder: none;\npadding: 8px 8px;\ncolor: black;\nfont-size: 1rem;\n}\nbutton:hover {\nbackground-color: #F0F0F0;\n}\nbutton.selected {\nbackground-color: #0077FF;\ncolor: white;\n}\n.d-none { display: none; }\n.d-block { display: block;}\n.d-flex { display: flex; flex-direction: column;}\n}\n",this.shadowRoot.innerHTML='<div><div id="options-list" style="display: flex; flex-direction: column;"></div></div>',this.shadowRoot.appendChild(n)}set options(n){this.internalOptions=n;const e=this.shadowRoot.getElementById("options-list");e.innerText="";for(const t of n){const n=document.createElement("button");n.setAttribute("value",t.value),n.innerText=t.label,n.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("option-select",{detail:{value:t.value}}))})),e.appendChild(n)}console.debug("set options")}get options(){return this.internalOptions}attributeChangedCallback(n,e,t){if("selectedoptionindex"===n){const n=parseInt(t);if(n<0)return;for(const n of this.shadowRoot.getElementById("options-list").getElementsByTagName("button"))n.className="";this.shadowRoot.getElementById("options-list").getElementsByTagName("button").length>n&&(this.shadowRoot.getElementById("options-list").getElementsByTagName("button")[n].className="selected")}else"theme"===n&&(this.renderAll(),this.options=this.internalOptions)}}e.CustomSelectView=t;class o extends HTMLElement{constructor(){super(),this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],this.selectedOptionIndex=-1;const n=this.attachShadow({mode:"open"}),e=document.createElement("style");e.setAttribute("id","root-style");const t=this.getAttribute("theme");e.textContent="dark"===t?"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid rgba(0, 0, 0, 0.7);\nbackground-color: #333333;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #333333;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n        }\n        button#create-new:hover {\n          background-color: #505050;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.3);\n        }\n        input#search {\n          background-color: #303030;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 4px 4px;\n          border-radius: 0px;\n          border: 2px solid #303030;\n          padding: 8px 8px;\n          outline: none;\ncolor: white;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n":"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid #B0B0B0;\nbackground-color: white;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #FFFFFF;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n          color:black;\n          font-size: 1rem;\n        }\n        button#create-new:hover {\n          background-color: #F0F0F0;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.1);\n        }\n        input#search {\n          background-color: #FFFFFF;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 5px 5px;\n          border-radius: 0px;\n          border: 1px solid #707070;\n          padding: 8px 8px;\n          outline: none;\ncolor: black;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\nmargin: 4px;\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n";const o=this.getAttribute("placeholder")||"type here";n.innerHTML=`\n        <div id="root">\n          <form id="search-form" style="display: flex;">\n            <input id="search" type="text" placeholder=${o} style="width: 100%;" autocomplete="off"/>\n          </form>\n          <div id="sub" class="d-none">\n            <custom-select-view id="select-view" theme=${t}></custom-select-view>\n            <button id="create-new">Create </button>\n          </div>\n        </div>\n`,n.appendChild(e);const i=n.getElementById("search"),s=n.getElementById("search-form");i.oninput=n=>{this.onSearchInputChange(n.target.value)},i.onkeydown=n=>{const e=this.shadowRoot.getElementById("select-view").options;"ArrowUp"===n.key?(this.selectedOptionIndex-=1,this.selectedOptionIndex<0&&(this.selectedOptionIndex=0),this.selectedOptionIndex>=e.length&&(this.selectedOptionIndex=e.length-1),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"ArrowDown"===n.key?(this.selectedOptionIndex+=1,this.selectedOptionIndex<0&&(this.selectedOptionIndex=0),this.selectedOptionIndex>=e.length&&(this.selectedOptionIndex=e.length-1),this.onFocus(),this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())):"Escape"===n.key&&this.onBlur()},s.onsubmit=n=>(this.onSearchFormSubmit(),!1),s.onfocus=()=>{this.onFocus()},i.onfocus=()=>{this.onFocus()},this.Options=[{value:0,label:"dog"},{value:1,label:"cat"},{value:2,label:"rabbit"}],i.onblur=()=>{},s.onblur=()=>{},this.options=this.Options,this.onblur=()=>{setTimeout((()=>{this.onBlur()}),10)},this.onfocus=()=>{this.onFocus()},n.getElementById("select-view").addEventListener("option-select",(n=>{const e=n.detail.value;this.onOptionSelected(e)})),this.shadowRoot.getElementById("sub").className="d-none";const r=this.shadowRoot.getElementById("create-new");r.addEventListener("click",(n=>{this.onCreateNewButtonClicked()})),r.className="d-none"}static get observedAttributes(){return["theme","placeholder"]}attributeChangedCallback(n,e,t){if(e!==t&&"theme"===n){const n=this.shadowRoot.getElementById("root-style"),e=t;this.shadowRoot.getElementById("select-view").setAttribute("theme",e),n.textContent="dark"===e?"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid rgba(0, 0, 0, 0.7);\nbackground-color: #333333;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #333333;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n        }\n        button#create-new:hover {\n          background-color: #505050;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.3);\n        }\n        input#search {\n          background-color: #303030;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 4px 4px;\n          border-radius: 0px;\n          border: 2px solid #303030;\n          padding: 8px 8px;\n          outline: none;\ncolor: white;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n":"\n        div#root {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        }\n        div#sub {\n          z-index: 1;\n          position: absolute;\n          top: 45px;\n          width: calc(100% - 8px);\n          margin: 0px 4px;\n          border: 1px solid #B0B0B0;\nbackground-color: white;\n        }\n        button#create-new {\n          text-align: start;\n          background-color: #FFFFFF;\ncolor: white;\n          border: none;\n          padding: 8px 4px;\n          color:black;\n          font-size: 1rem;\n        }\n        button#create-new:hover {\n          background-color: #F0F0F0;\n        }\n        .d-none { display: none; }\n        .d-block { display: block;}\n        div#sub.d-flex {\n          display: flex; flex-direction: column;\n          box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.1);\n        }\n        input#search {\n          background-color: #FFFFFF;\n          transition: border-color 0.1s;\n          font-size: 1rem;\n          margin: 5px 5px;\n          border-radius: 0px;\n          border: 1px solid #707070;\n          padding: 8px 8px;\n          outline: none;\ncolor: black;\n}    input#search:focus-visible {\nborder: 2px solid rgba(100, 170, 255, 0.7);\nmargin: 4px;\noutline-width: 0;\n}\ninput#search.selected {\ncolor: #FF3311;\nborder-color: #FF3311;\n}\n"}}onSearchFormSubmit(){const n=this.shadowRoot.getElementById("select-view");1===this.shadowRoot.getElementById("select-view").options.length?this.onOptionSelected(n.options[0].value):this.selectedOptionIndex>=0&&this.selectedOptionIndex<=this.Options.length?this.onOptionSelected(this.options[this.selectedOptionIndex].value):"d-block"===this.shadowRoot.getElementById("create-new").className&&this.onCreateNewButtonClicked(),this.onBlur()}onCreateNewButtonClicked(){new Array(this.Options);const n={value:this.Options.length,label:this.shadowRoot.getElementById("search").value};this.Options.push(n),this.dispatchEvent(new CustomEvent("selection-options-change",{detail:{options:this.Options}})),this.onOptionSelected(n.value)}onOptionSelected(n){let e="",t=0;for(const o of this.Options)o.value===n&&(e=o.label,this.selectedOptionIndex=t,this.shadowRoot.getElementById("select-view").setAttribute("selectedoptionindex",this.selectedOptionIndex.toString())),t+=1;this.shadowRoot.getElementById("search").value=e,this.dispatchEvent(new CustomEvent("type-select-change",{detail:{value:n}})),this.onBlur()}get currentLabel(){return this.shadowRoot.getElementById("search").value}onFocus(){this.shadowRoot.getElementById("sub").className="d-flex",this.shadowRoot.getElementById("search").focus()}onBlur(){this.shadowRoot.getElementById("search").blur(),this.shadowRoot.getElementById("sub").className="d-none"}setCreateNewButtonDisplay(n,e){const t=this.shadowRoot.getElementById("create-new");t.innerText=`Create: ${e}`,""!==e&&(n.length>1||1!==n.length||n[0].label!==e)?t.className="d-block":t.className="d-none"}onSearchInputChange(n){const e=this.Options.filter((e=>e.label.includes(n)));this.shadowRoot.getElementById("select-view").options=e,this.setCreateNewButtonDisplay(e,n)}set options(n){this.Options=n,this.shadowRoot.getElementById("select-view").options=n}get options(){return this.Options}set value(n){for(const e of this.options)e.value===n&&(this.shadowRoot.getElementById("search").value=e.label)}set selected(n){this.shadowRoot.getElementById("search").className=n?"selected":"not-selected"}}e.TypeSelectView=o},54:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SwitchComponent=void 0;const o=t(653);class i extends o.ComponentBase{constructor(){super(),this.shadowRoot.getElementById("container").addEventListener("click",(()=>{this.toggleOnOff()}))}toggleOnOff(){const n=this.shadowRoot.getElementById("toggle"),e=this.shadowRoot.getElementById("container"),t=n.classList.contains("on");n.className=t?"off":"on",e.className=t?"off":"on",this.dispatchEvent(new CustomEvent("switch-toggle",{detail:{toggleOn:!t}}))}getStyle(){return"\n        div#container{\n          border-radius: 50px;\n          height: 30px;\n          padding: 0px;\n          background-color: #E0E0E0;\n          border: 1px solid #AAAAAA;\n          position: relative;\n          width: 55px;\n          transition: all 0.1s;\n        }\n        div#container.on{\n          background-color: #0077FF;\n        }\n        #toggle{\n          position: absolute;\n          transition: all 0.1s;\n          left: 5px;\n          top: 5px;\n        }\n        span{\n        font-size: 0.65rem;\n        font-family: system-ui;\n        display: inline-flex;\n        align-items: center;\n        height: 100%;\n        font-weight: bold;\n        }\n        span#on{\n        position: absolute;\n        left: 7px;\n        color: white;\n        }\n        span#off{\n        position: absolute;\n        right: 7px;\n        color: #505050;\n        }\n\n        div#container.on span#off{display: none;}\n        div#container.off span#on {display: none;}\n        #toggle.on {\n          left: calc(100% - 25px);\n        }\n        "}renderHTML(){return'\n        <div id="container">\n          <span id="on">ON</span>\n          <span id="off">OFF</span>\n          <div id="toggle">\n          <svg width="20px" height="20px" viewbox="0 0 100 100">\n            <circle cx="50" cy="50" r="50" fill="#FFFFFF" stroke="#303030" stroke-width="2"/>\n          </svg>\n          </div>\n        </div>\n        '}}e.SwitchComponent=i,customElements.define("switch-component",i)},541:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TabSelection=void 0;const o=t(653);class i extends o.ComponentBase{constructor(){super(),this.currentSelectedIndex=-1,this.renderLabels()}static get observedAttributes(){return["theme","labels","optionindex"]}renderLabels(){const n=JSON.parse(this.getAttribute("labels")),e=this.shadowRoot.getElementById("root");if(e.innerText="",this.currentSelectedIndex<0){const n=parseInt(this.getAttribute("optionindex")||"0");this.currentSelectedIndex=n}let t=0;for(const o of n){const n=document.createElement("div"),i=t===this.currentSelectedIndex;n.setAttribute("class","tab-item-container "+(i?"selected":"not-selected")),n.innerHTML=`\n              <button class=${i?"selected":"not-selected"}>${o}</button>\n            `,e.appendChild(n);const s=t;n.addEventListener("click",(()=>{this.currentSelectedIndex=s,this.renderLabels(),this.dispatchEvent(new CustomEvent("option-select",{detail:{index:s,label:o}}))})),t+=1}}getStyle(){return"div#root {\n          display: grid;\n          gap: 0px;\n          grid-auto-columns: 1fr;\n          grid-auto-flow: column;\n          border-radius: 0px;\n        }\n        div#root.dark {\n          background-color: #1F1F1F;\n          border: 1px solid #505050;\n        }\n        div#root.light {\n          background-color: white;;\n          border: 1px solid transparent;\n        }\n        button {\n          appearance: none;\n          margin: 0px;\n          margin-right: auto;\n          margin-left: auto;\n          border: 0px;\n          padding: 4px 8px;\n          font-size: 0.8rem;\n          font-weight: bold;\n          font-family: system-ui;\n        }\n        div.light button {\n          background-color: transparent\n        }\n        div.dark button {\n          background-color: rgba(0, 0, 0, 0.0);\n        }\n        div.dark button.selected{\n          color: rgba(0, 0, 0, 1.0);\n          //background-color: rgba(0, 0, 0, 0.07);\n        }\n        div.dark button.not-selected{\n          color: rgba(255, 255, 255, 0.8);\n          //background-color: rgba(0, 0, 0, 0);\n        }\n        \n\n    div.light button.selected { color: white;}\n    div.light button.not-selected { color: #505050;}\n    div.selected, div.not-selected{\n      display: flex;\n      padding: 0px 4px;\nborder-radius: 0px;\ntransition: background-color 0.1s;\n    }\n    div.dark div.selected {\n      background-color: #AAAAAA;\n    }\n    div.dark div.not-selected {\n      background-color: rgba(0, 0, 0, 0.0);\n\n    }\n    div.dark div.not-selected:hover {\n      background-color: #303030;\n    }\ndiv.light div.not-selected:hover {background-color: rgba(0, 0, 0, 0.05);}\n    div.light div.selected {\nbackground-color: #0077FF;\n}\ndiv.light div.not-selected {\nbackground-color: #F7F7F7;\n}\n\n    "}renderHTML(){return`\n        <div id="root" class=${this.getAttribute("theme")||"light"}>\n        </div>\n        `}}e.TabSelection=i,customElements.define("tab-selection",i)}},e={};!function t(o){var i=e[o];if(void 0!==i)return i.exports;var s=e[o]={exports:{}};return n[o](s,s.exports,t),s.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,